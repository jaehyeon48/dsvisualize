{"version":3,"sources":["components/Main.js","components/ReturnToHome.js","components/singlyLinkedList/SllCanvas.js","components/singlyLinkedList/SLL_class.js","components/singlyLinkedList/SinglyLinkedList.js","components/doublyLinkedList/DllCanvas.js","components/doublyLinkedList/DLL_class.js","components/doublyLinkedList/DoublyLinkedList.js","components/stack/StackCanvas.js","components/stack/Stack_class.js","components/stack/Stack.js","components/queue/QueueCanvas.js","components/queue/QUEUE_class.js","components/queue/Queue.js","components/deque/DequeCanvas.js","components/deque/DEQUE-class.js","components/deque/Deque.js","components/InfoIcon.js","components/CloseIcon.js","components/binarySearchTree/BstMethodsInfo.js","components/binarySearchTree/BstCanvas.js","components/binarySearchTree/BST_class.js","components/binarySearchTree/Bst.js","App.js","index.js"],"names":["Main","history","useHistory","className","onClick","push","ReturnToHome","aria-hidden","focusable","data-prefix","data-icon","role","xmlns","viewBox","fill","d","SllCanvas","nodes","canvasRef","useRef","useEffect","canvas","current","ctx","getContext","canvasWidth","offsetWidth","canvasHeight","offsetHeight","style","width","height","draw","rectWidth","rectHeight","startingPointX","startingPointY","horizArrowLen","vertArrowLen","fontSize","lineHeightOfData","nodeLength","length","maxWidthOfData","forEach","nodeData","i","strokeStyle","fillStyle","textAlign","shadowBlur","font","rectX","rectY","printX","printY","strokeRect","printData","headTextWidth","measureText","headTextX","headTextY","fillText","fArrowY","drawForwardArrow","tailTextWidth","tailTextX","tailTextY","bArrowY","drawBackwardArrow","vertFwArrowX","fromX","fromY","toX","toY","beginPath","dx","dy","angle","Math","atan2","moveTo","lineTo","cos","PI","sin","stroke","context","text","x","y","lineHeight","fitWidth","lineNum","str","substr","ref","Node","_data","_next","this","next","data","SLL","head","tail","newNode","console","log","nodeOneBeforeTail","insertIndex","unshift","append","nodeOneBeforeInsert","removeIndex","shift","pop","nodeOneBeforeRemove","currentNode","SinglyLinkedList","location","useLocation","useState","setNodeData","setNodeLength","isMaxLength","setIsMaxLength","inputData","setInputData","inputIndex","setInputIndex","clear","handleSetNodeData","getAllNodesForRender","getLength","Fragment","color","maxLengthColor","type","value","onChange","e","target","trim","alert","disabled","isNaN","parseInt","insertAt","removeAt","window","confirm","DllCanvas","arrowFromX","arrowToX","vertBwArrowX","vertArrowFromY","vertArrowToY","_prev","prev","DLL","oneBeforeInsertNode","oneBeforeRemoveNode","index","DoublyLinkedList","StackCanvas","stackItems","containerWidth","containerHeight","stackData","drawStackContainer","stackItemGap","stackItemWidth","stackItemHeight","drawStackItem","startX","startY","lineWidth","stackItemStartX","stackItemStartY","fillRect","STACK","top","size","newData","reverse","Stack","setStackData","stackSize","setStackSize","isMaxSize","setIsMaxSize","handleSetStackData","getSize","maxSizeColor","QueueCanvas","queueItems","queueSize","queueData","queueItemGap","queueItemWidth","queueItemHeight","queueItemStartX","queueItemStartY","rightArrowX","ArrowY","leftArrowX","drawQueueContainer","drawFrontText","drawQueueItem","drawRearText","itemWidth","frontX","frontY","itemGap","rearX","rearY","QUEUE","front","rear","Queue","setQueueData","setQueueSize","handleSetQueueData","enqueue","dequeue","DequeCanvas","dequeItems","dequeData","dequeItemGap","dequeItemWidth","dequeItemHeight","dequeItemStartX","dequeItemStartY","rightForwardArrowX","forwardArrowY","backwardArrowY","leftForwardArrowX","drawDequeContainer","drawDequeItem","drawBackText","closePath","DEQUE","back","cur","Deque","setDequeData","DequeSize","setDequeSize","handleSetDequeData","insertFront","insertBack","removeFront","removeBack","InfoIcon","onClickFunc","CloseIcon","onClickFunction","BstMethodsInfo","closeInfoFunc","BstCanvas","bstItems","bstNode","radius","maxNumOfNode","depth","depthHeight","nodeGap","circleX","pos","circleY","drawCircle","drawText","lineFromX","lineToX","lineFromY","lineToY","drawLine","circleRadius","arc","textX","textY","left","right","parent","BST","root","removeData","isLeaf","successorNode","searchData","node","treeNode","preOrder","inOrder","postOrder","leftDepth","getMaxDepth","rightDepth","dataArr","Bst","bstData","setBstData","bstSize","setBstSize","bstDepth","setBstDepth","isMaxDepth","setIsMaxDepth","isInfoOpen","setIsInfoOpen","handleSetBstData","dataArray","getRoot","sort","sortByData","sortByDepth","closeBstMethodsInfo","document","removeEventListener","preventDefault","addEventListener","colorMaxSize","colorMaxDepth","insert","maxDepth","remove","a","b","App","basename","path","component","exact","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f6046566.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport './main.css';\r\n\r\nconst Main = () => {\r\n  let history = useHistory();\r\n\r\n  const redirectToSLL = () => {\r\n    history.push('/sll');\r\n  }\r\n\r\n  const redirectToDLL = () => {\r\n    history.push('/dll');\r\n  }\r\n\r\n  const redirectToStack = () => {\r\n    history.push('/stack');\r\n  }\r\n\r\n  const redirectToQueue = () => {\r\n    history.push('/queue');\r\n  }\r\n\r\n  const redirectToDeque = () => {\r\n    history.push('/deque');\r\n  }\r\n\r\n  const redirectToBST = () => {\r\n    history.push('/bst');\r\n  }\r\n\r\n  return (\r\n    <div className=\"main-page\">\r\n      <h1 className=\"main-page-header\">\r\n        Data Structures Visualizer\r\n      </h1>\r\n      <div className=\"select-data-structures\">\r\n        <div\r\n          className=\"data-structures-item sll\"\r\n          onClick={redirectToSLL}\r\n        >Singly Linked List</div>\r\n        <div\r\n          className=\"data-structures-item dll\"\r\n          onClick={redirectToDLL}\r\n        >Doubly Linked List</div>\r\n        <div\r\n          className=\"data-structures-item stack\"\r\n          onClick={redirectToStack}\r\n        >Stack</div>\r\n        <div\r\n          className=\"data-structures-item queue\"\r\n          onClick={redirectToQueue}\r\n        >Queue</div>\r\n        <div\r\n          className=\"data-structures-item deque\"\r\n          onClick={redirectToDeque}\r\n        >Deque</div>\r\n        <div\r\n          className=\"data-structures-item bst\"\r\n          onClick={redirectToBST}\r\n        >Binary Search Tree</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst ReturnToHome = () => {\r\n  let history = useHistory();\r\n  const redirectToHome = () => {\r\n    history.push('/');\r\n  }\r\n\r\n  return (\r\n    <div className=\"return-to-home\" onClick={redirectToHome}>\r\n      <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"home\" className=\"svg-inline--fa fa-home fa-w-18\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path fill=\"currentColor\" d=\"M280.37 148.26L96 300.11V464a16 16 0 0 0 16 16l112.06-.29a16 16 0 0 0 15.92-16V368a16 16 0 0 1 16-16h64a16 16 0 0 1 16 16v95.64a16 16 0 0 0 16 16.05L464 480a16 16 0 0 0 16-16V300L295.67 148.26a12.19 12.19 0 0 0-15.3 0zM571.6 251.47L488 182.56V44.05a12 12 0 0 0-12-12h-56a12 12 0 0 0-12 12v72.61L318.47 43a48 48 0 0 0-61 0L4.34 251.47a12 12 0 0 0-1.6 16.9l25.5 31A12 12 0 0 0 45.15 301l235.22-193.74a12.19 12.19 0 0 1 15.3 0L530.9 301a12 12 0 0 0 16.9-1.6l25.5-31a12 12 0 0 0-1.7-16.93z\"></path></svg>\r\n      <span>HOME</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReturnToHome;\r\n","import React, { useEffect, useRef } from 'react'\r\n\r\nconst SllCanvas = ({\r\n  nodes\r\n}) => {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const canvasWidth = canvas.offsetWidth;\r\n    const canvasHeight = canvas.offsetHeight;\r\n    canvas.style.width = '100%';\r\n    canvas.style.height = '100%';\r\n    canvas.width = canvasWidth;\r\n    canvas.height = canvasHeight;\r\n\r\n    draw(ctx, nodes, canvasWidth, canvasHeight);\r\n  }, [nodes]);\r\n\r\n  const draw = (ctx, nodes, canvasWidth, canvasHeight) => {\r\n    // define rectangle's width and height with respect to the canvas' size\r\n    let rectWidth;\r\n    let rectHeight;\r\n    let startingPointX;\r\n    let startingPointY;\r\n    let horizArrowLen; // horizontal arrow's length\r\n    let vertArrowLen; // vertical arrow's length\r\n    let fontSize;\r\n    let lineHeightOfData = 20; // line height of data inside of each nodes\r\n    if (canvasWidth >= 1408) { // 1440px wide\r\n      rectWidth = canvasWidth * 0.17;\r\n      rectHeight = canvasHeight * 0.2;\r\n      startingPointX = canvasWidth * 0.01;\r\n      startingPointY = canvasHeight * 0.05;\r\n      horizArrowLen = canvasWidth * 0.1;\r\n      vertArrowLen = canvasHeight * 0.15;\r\n      lineHeightOfData = 22;\r\n      fontSize = 24;\r\n    }\r\n    else if (canvasWidth >= 992) { // 1024px wide\r\n      rectWidth = canvasWidth * 0.1682;\r\n      rectHeight = canvasHeight * 0.1748;\r\n      startingPointX = canvasWidth * 0.01;\r\n      startingPointY = canvasHeight * 0.05;\r\n      horizArrowLen = canvasWidth * 0.1024;\r\n      vertArrowLen = canvasHeight * 0.1878;\r\n      fontSize = 22;\r\n    }\r\n    else if (canvasWidth >= 736) { // 768px wide\r\n      rectWidth = canvasWidth * 0.1502;\r\n      rectHeight = canvasHeight * 0.1748;\r\n      startingPointX = canvasWidth * 0.01;\r\n      startingPointY = canvasHeight * 0.05;\r\n      horizArrowLen = canvasWidth * 0.1264;\r\n      vertArrowLen = canvasHeight * 0.1878;\r\n      fontSize = 18;\r\n    }\r\n    else if (canvasWidth >= 393) { // 425px wide\r\n      rectWidth = canvasWidth * 0.1799;\r\n      rectHeight = canvasHeight * 0.19;\r\n      startingPointX = canvasWidth * 0.01;\r\n      startingPointY = canvasHeight * 0.05;\r\n      horizArrowLen = canvasWidth * 0.0868;\r\n      vertArrowLen = canvasHeight * 0.165;\r\n      fontSize = 16;\r\n    }\r\n    else { // narrow than 425px\r\n      rectWidth = canvasWidth * 0.1883;\r\n      rectHeight = canvasHeight * 0.1934;\r\n      startingPointX = canvasWidth * 0.01;\r\n      startingPointY = canvasHeight * 0.05;\r\n      horizArrowLen = canvasWidth * 0.0756;\r\n      vertArrowLen = canvasHeight * 0.1599;\r\n      fontSize = 14;\r\n    }\r\n\r\n    const nodeLength = nodes.length;\r\n    const maxWidthOfData = rectWidth * 0.8;  // maximum width of data inside of each nodes\r\n    nodes.forEach((nodeData, i) => {\r\n      ctx.strokeStyle = '#003FFF';\r\n      ctx.fillStyle = '#000';\r\n      ctx.textAlign = 'start';\r\n      ctx.shadowBlur = 2;\r\n      ctx.font = `normal ${fontSize}px sans-serif`;\r\n\r\n      if (i < 4) {\r\n        // x, y point of a rectangle, respectively\r\n        const rectX = startingPointX + (rectWidth + horizArrowLen) * i;\r\n        const rectY = startingPointY;\r\n        // x, y point of print, respectively\r\n        const printX = (startingPointX + rectWidth * 0.1) + (rectWidth + horizArrowLen) * i;\r\n        const printY = startingPointY + (rectHeight * 0.25);\r\n\r\n        ctx.strokeRect(rectX, rectY, rectWidth, rectHeight);\r\n        printData(ctx, nodeData, printX, printY, lineHeightOfData, maxWidthOfData);\r\n\r\n        // print \"head\" text\r\n        ctx.fillStyle = \"red\";\r\n        if (i === 0) {\r\n          const headTextWidth = ctx.measureText('head').width;\r\n          const headTextX = startingPointX + (rectWidth - headTextWidth) / 2; // x point of \"head\" text\r\n          const headTextY = startingPointY * 0.8 // y point of \"head\" text\r\n          ctx.fillText('head', headTextX, headTextY);\r\n        }\r\n        if (i !== 0) {\r\n          // arrow's \"from\" x point\r\n          const arrowFromX = (startingPointX + rectWidth) + (horizArrowLen + rectWidth) * (i - 1);\r\n          // y point of forward arrow (-->)\r\n          const fArrowY = startingPointY + (rectHeight * 0.5);\r\n          // arrow's \"to\" x point\r\n          const arrowToX = startingPointX + (rectWidth + horizArrowLen) * i;\r\n\r\n          drawForwardArrow(ctx, arrowFromX, fArrowY, arrowToX, fArrowY);\r\n        }\r\n        if (i === nodeLength - 1) { // if the last node, print \"tail\" text\r\n          ctx.fillStyle = \"red\";\r\n          const tailTextWidth = ctx.measureText('tail').width;\r\n          // x point of \"tail\" text\r\n          const tailTextX = startingPointX + (rectWidth - tailTextWidth) / 2 + (rectWidth + horizArrowLen) * i\r\n          // y point of \"tail\" text\r\n          const tailTextY = (startingPointY * 1.65) + rectHeight;\r\n\r\n          ctx.fillText(\"tail\", tailTextX, tailTextY);\r\n        }\r\n      }\r\n      else if (i >= 4 && i < 8) {\r\n        // x, y point of a rectangle, respectively\r\n        const rectX = canvasWidth - (startingPointX + rectWidth) - (horizArrowLen + rectWidth) * (i - 4);\r\n        const rectY = startingPointY + rectHeight + vertArrowLen;\r\n        // x, y point of print, respectively\r\n        const printX = canvasWidth - (startingPointX + rectWidth * 0.9) - (horizArrowLen + rectWidth) * (i - 4);\r\n        const printY = startingPointY + rectHeight * 1.25 + vertArrowLen;\r\n\r\n        ctx.strokeRect(rectX, rectY, rectWidth, rectHeight);\r\n        printData(ctx, nodeData, printX, printY, lineHeightOfData, maxWidthOfData);\r\n\r\n        if (i !== 4) {\r\n          // arrow's \"from\" x point\r\n          const arrowFromX = canvasWidth - startingPointX - (rectWidth + horizArrowLen) * (i - 4);\r\n          // arrow's \"to\" x point\r\n          const arrowToX = canvasWidth - (startingPointX + rectWidth) - (horizArrowLen + rectWidth) * (i - 5);\r\n          // y point of backward arrow (<--)\r\n          const bArrowY = startingPointY + rectHeight * 1.5 + vertArrowLen;\r\n\r\n          drawBackwardArrow(ctx, arrowFromX, bArrowY, arrowToX, bArrowY);\r\n        }\r\n        else { // vertical arrow\r\n          // vertical forward arrow's (v) x point\r\n          const vertFwArrowX = canvasWidth - startingPointX - (rectWidth * 0.5);\r\n          // vertical arrows' \"from\" y point\r\n          const vertArrowFromY = startingPointY + rectHeight;\r\n          // vertical arrow's \"to\" y point\r\n          const vertArrowToY = startingPointY + rectHeight + vertArrowLen;\r\n\r\n          drawForwardArrow(ctx, vertFwArrowX, vertArrowFromY, vertFwArrowX, vertArrowToY);\r\n        }\r\n        if (i === nodeLength - 1) { // if the last node, print \"tail\" text\r\n          ctx.fillStyle = \"red\";\r\n          const tailTextWidth = ctx.measureText('tail').width;\r\n          // x point of \"tail\" text\r\n          const tailTextX = canvasWidth - startingPointX - tailTextWidth - (rectWidth - tailTextWidth) / 2 - (rectWidth + horizArrowLen) * (i - 4);\r\n          // y point of \"tail\" text\r\n          const tailTextY = (startingPointY * 1.8) + rectHeight * 2 + vertArrowLen;\r\n\r\n          ctx.fillText(\"tail\", tailTextX, tailTextY);\r\n        }\r\n      }\r\n      else if (i >= 8) {\r\n        // x, y point of a rectangle, respectively\r\n        const rectX = startingPointX + (rectWidth + horizArrowLen) * (i - 8);\r\n        const rectY = startingPointY + rectHeight * 2 + vertArrowLen * 2;\r\n        // x, y point of print, respectively\r\n        const printX = (startingPointX + rectWidth * 0.1) + (rectWidth + horizArrowLen) * (i - 8);\r\n        const printY = canvasHeight - (startingPointY + rectHeight * 0.75);\r\n\r\n        ctx.strokeRect(rectX, rectY, rectWidth, rectHeight);\r\n        printData(ctx, nodeData, printX, printY, lineHeightOfData, maxWidthOfData);\r\n        if (i !== 8) {\r\n          // arrow's \"from\" x point\r\n          const arrowFromX = (startingPointX + rectWidth) + (horizArrowLen + rectWidth) * (i - 9);\r\n          // y point of forward arrow (-->)\r\n          const fArrowY = canvasHeight - (startingPointY + rectHeight * 0.5);\r\n          // arrow's \"to\" x point\r\n          const arrowToX = startingPointX + (rectWidth + horizArrowLen) * (i - 8);\r\n\r\n          drawForwardArrow(ctx, arrowFromX, fArrowY, arrowToX, fArrowY);\r\n        }\r\n        else { // vertical arrow\r\n          // vertical forward arrow's (v) x point\r\n          const vertFwArrowX = startingPointX + rectWidth * 0.5;\r\n          // vertical arrows' \"from\" y point\r\n          const vertArrowFromY = canvasHeight - (startingPointY + rectHeight + vertArrowLen);\r\n          // vertical arrow's \"to\" y point\r\n          const vertArrowToY = canvasHeight - (startingPointY + rectHeight);\r\n\r\n          drawForwardArrow(ctx, vertFwArrowX, vertArrowFromY, vertFwArrowX, vertArrowToY);\r\n        }\r\n        if (i === nodeLength - 1) { // if the last node, print \"tail\" text\r\n          ctx.fillStyle = \"red\";\r\n          const tailTextWidth = ctx.measureText('tail').width;\r\n          // x point of \"tail\" text\r\n          const tailTextX = startingPointX + (rectWidth - tailTextWidth) / 2 + (rectWidth + horizArrowLen) * (i - 8);\r\n          // y point of \"tail\" text\r\n          const tailTextY = (startingPointY * 1.65) + rectHeight * 3 + vertArrowLen * 2;\r\n\r\n          ctx.fillText(\"tail\", tailTextX, tailTextY);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  const drawForwardArrow = (ctx, fromX, fromY, toX, toY) => {\r\n    ctx.beginPath();\r\n    let headlen = 9; // length of head in pixels\r\n    let dx = toX - fromX;\r\n    let dy = toY - fromY;\r\n    let angle = Math.atan2(dy, dx);\r\n    ctx.strokeStyle = \"#000\";\r\n    ctx.moveTo(fromX, fromY);\r\n    ctx.lineTo(toX, toY);\r\n    ctx.lineTo(toX - headlen * Math.cos(angle - Math.PI / 6), toY - headlen * Math.sin(angle - Math.PI / 6));\r\n    ctx.moveTo(toX, toY);\r\n    ctx.lineTo(toX - headlen * Math.cos(angle + Math.PI / 6), toY - headlen * Math.sin(angle + Math.PI / 6));\r\n    ctx.stroke();\r\n  }\r\n\r\n  const drawBackwardArrow = (ctx, fromX, fromY, toX, toY) => {\r\n    ctx.beginPath();\r\n    let headlen = 9; // length of head in pixels\r\n    let dx = fromX - toX;\r\n    let dy = fromY - toY;\r\n    let angle = Math.atan2(dy, dx);\r\n    ctx.strokeStyle = \"#000\";\r\n    ctx.moveTo(toX, toY);\r\n    ctx.lineTo(fromX, fromY);\r\n    ctx.lineTo(fromX - headlen * Math.cos(angle - Math.PI / 6), fromY - headlen * Math.sin(angle - Math.PI / 6));\r\n    ctx.moveTo(fromX, fromY);\r\n    ctx.lineTo(fromX - headlen * Math.cos(angle + Math.PI / 6), fromY - headlen * Math.sin(angle + Math.PI / 6));\r\n    ctx.stroke();\r\n  }\r\n\r\n  function printData(context, text, x, y, lineHeight, fitWidth = 0, lineNum = 0) {\r\n    // if text's width is 0, no need to wrap data\r\n    if (fitWidth <= 0) {\r\n      context.fillText(text, x, y);\r\n      return;\r\n    }\r\n\r\n    // divide data until the substring's width is longer than the specified width\r\n    for (let i = 1; i <= text.length; i++) {\r\n      let str = text.substr(0, i);\r\n      if (context.measureText(str).width > fitWidth) {\r\n        if (lineNum < 5) { // truncate data from line number 6\r\n          context.fillText(text.substr(0, i - 1), x, y);\r\n        }\r\n        else {\r\n          context.fillText('', x, y);\r\n        }\r\n        printData(context, text.substr(i - 1), x, y + lineHeight, lineHeight, fitWidth, lineNum + 1);\r\n        return;\r\n      }\r\n    }\r\n    if (lineNum < 5) { // truncate data from line number 6\r\n      context.fillText(text, x, y);\r\n    }\r\n    else {\r\n      context.fillText('', x, y);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <canvas ref={canvasRef}></canvas>\r\n  );\r\n}\r\n\r\nexport default SllCanvas;\r\n","class Node {\r\n  constructor(_data = null, _next = null) {\r\n    this.next = _next;\r\n    this.data = _data;\r\n  }\r\n}\r\n\r\nclass SLinkedList {\r\n  constructor() {\r\n    this.head = null;\r\n    this.tail = null;\r\n    this.length = 0;\r\n  }\r\n\r\n  // add data to the last place of the list\r\n  append(data) {\r\n    const newNode = new Node(data);\r\n    if (this.length === 0) {\r\n      this.head = this.tail = newNode;\r\n    }\r\n    else {\r\n      this.tail.next = newNode;\r\n      this.tail = newNode;\r\n    }\r\n    this.length++;\r\n  }\r\n\r\n  // remove data at the last place of the list\r\n  pop() {\r\n    if (this.length === 0) {\r\n      return console.log(\"The list is empty. Cannot pop()\");\r\n    }\r\n    else if (this.length === 1) {\r\n      this.head = this.tail = null;\r\n    }\r\n    else {\r\n      let nodeOneBeforeTail = this.head; // node one position before the tail\r\n\r\n      while (nodeOneBeforeTail.next !== this.tail) {\r\n        nodeOneBeforeTail = nodeOneBeforeTail.next;\r\n      }\r\n\r\n      nodeOneBeforeTail.next = null;\r\n      this.tail = nodeOneBeforeTail;\r\n    }\r\n    this.length--;\r\n  }\r\n\r\n  // add data to the first place of the list\r\n  unshift(data) {\r\n    const newNode = new Node(data);\r\n    if (this.length === 0) {\r\n      this.head = this.tail = newNode;\r\n    }\r\n    else {\r\n      newNode.next = this.head;\r\n      this.head = newNode;\r\n    }\r\n    this.length++;\r\n  }\r\n\r\n  // remove data at the first place of the list\r\n  shift() {\r\n    if (this.length === 0) {\r\n      return console.log(\"The list is empty. Cannot shift()\");\r\n    }\r\n    else if (this.length === 1) {\r\n      this.head = this.tail = null;\r\n    }\r\n    else {\r\n      this.head = this.head.next;\r\n    }\r\n    this.length--;\r\n  }\r\n\r\n  // insert data into the specified index\r\n  insertAt(insertIndex, data) {\r\n    if (insertIndex < 0 || insertIndex > this.length) {\r\n      console.log(\"Insert index out of bounds.\");\r\n      return -1; // return -1 for alerting message at the frontend\r\n    }\r\n    else if (insertIndex === 0) {\r\n      return this.unshift(data);\r\n    }\r\n    else if (insertIndex === this.length) {\r\n      return this.append(data);\r\n    }\r\n    else {\r\n      const newNode = new Node(data);\r\n      let nodeOneBeforeInsert = this.head; // node one position before insert place\r\n\r\n      for (let i = 0; i < insertIndex - 1; i++) {\r\n        nodeOneBeforeInsert = nodeOneBeforeInsert.next;\r\n      }\r\n\r\n      newNode.next = nodeOneBeforeInsert.next;\r\n      nodeOneBeforeInsert.next = newNode;\r\n      this.length++;\r\n    }\r\n  }\r\n\r\n  // remove data from the specified index\r\n  removeAt(removeIndex) {\r\n    if (removeIndex < 0 || removeIndex >= this.length) {\r\n      console.log(\"Remove index out of bounds.\");\r\n      return -1; // return -1 for alerting message at the frontend\r\n    }\r\n    else if (removeIndex === 0) {\r\n      return this.shift();\r\n    }\r\n    else if (removeIndex === this.length - 1) {\r\n      return this.pop();\r\n    }\r\n    else {\r\n      let nodeOneBeforeRemove = this.head; // node one position before the removing node\r\n\r\n      for (let i = 0; i < removeIndex - 1; i++) {\r\n        nodeOneBeforeRemove = nodeOneBeforeRemove.next;\r\n      }\r\n\r\n      nodeOneBeforeRemove.next = nodeOneBeforeRemove.next.next;\r\n      this.length--;\r\n    }\r\n  }\r\n\r\n  clear() {\r\n    if (this.length === 0) {\r\n      return console.log(\"The list is empty. Cannot clear()\");\r\n    }\r\n    else {\r\n      this.head = this.tail = 0;\r\n      this.length = 0;\r\n    }\r\n  }\r\n\r\n  print() {\r\n    if (this.length === 0) {\r\n      return console.log(\"The list is empty.\");\r\n    }\r\n\r\n    let currentNode = this.head;\r\n\r\n    while (currentNode) {\r\n      console.log(currentNode.data);\r\n      currentNode = currentNode.next;\r\n    }\r\n  }\r\n\r\n  getLength() {\r\n    return this.length;\r\n  }\r\n\r\n  getAllNodesForRender() {\r\n    const nodes = [];\r\n    let currentNode = this.head;\r\n    while (currentNode) {\r\n      nodes.push(currentNode.data);\r\n      currentNode = currentNode.next;\r\n    }\r\n    return nodes;\r\n  }\r\n}\r\n\r\nexport const SLL = new SLinkedList();\r\n// const SLL = new SLinkedList();\r\n\r\n// SLL.append(1);\r\n// SLL.append(4);\r\n// SLL.insertAt(0, 2);\r\n// SLL.unshift(3);\r\n// SLL.removeAt(1);\r\n\r\n// SLL.print();","import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nimport ReturnToHome from '../ReturnToHome';\r\nimport SllCanvas from './SllCanvas';\r\nimport { SLL } from './SLL_class';\r\nimport './singlyLinkedList.css';\r\n\r\nconst SinglyLinkedList = () => {\r\n  let location = useLocation();\r\n  const [nodeData, setNodeData] = useState([]);\r\n  const [nodeLength, setNodeLength] = useState(0);\r\n  const [isMaxLength, setIsMaxLength] = useState(false);\r\n  const [inputData, setInputData] = useState('');\r\n  const [inputIndex, setInputIndex] = useState('');\r\n\r\n  useEffect(() => { // clear list when a user changes route\r\n    SLL.clear();\r\n    handleSetNodeData();\r\n  }, [location]);\r\n\r\n  useEffect(() => {\r\n    if (nodeLength >= 12) {\r\n      setIsMaxLength(true);\r\n    }\r\n    else {\r\n      setIsMaxLength(false);\r\n    }\r\n  }, [nodeLength]);\r\n\r\n  const handleChangeInputData = (e) => {\r\n    setInputData(e.target.value);\r\n  }\r\n\r\n  const handleChangeInputIndex = (e) => {\r\n    setInputIndex(e.target.value);\r\n  }\r\n\r\n  const handleSetNodeData = () => {\r\n    setNodeData(SLL.getAllNodesForRender());\r\n    setNodeLength(SLL.getLength());\r\n    setInputData('');\r\n    setInputIndex('');\r\n  }\r\n\r\n  const handleAppendSLL = () => {\r\n    if (inputData.trim() === '') {\r\n      return alert('Please input valid data.');\r\n    }\r\n    SLL.append(inputData);\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handlePopSLL = () => {\r\n    if (nodeLength === 0) {\r\n      return alert(\"The list is empty.\");\r\n    }\r\n    SLL.pop();\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handleUnshiftSLL = () => {\r\n    if (inputData.trim() === '') {\r\n      return alert('Please input valid data');\r\n    }\r\n    SLL.unshift(inputData);\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handleShiftSLL = () => {\r\n    if (nodeLength === 0) {\r\n      return alert(\"The list is empty.\");\r\n    }\r\n    SLL.shift();\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handleInsertAtSLL = () => {\r\n    if (inputIndex.trim() === '' || isNaN(parseInt(inputIndex))) {\r\n      return alert('Please input valid index');\r\n    }\r\n    if (inputData.trim() === '') {\r\n      return alert('Please input valid data');\r\n    }\r\n\r\n    const insertAtResult = SLL.insertAt(parseInt(inputIndex), inputData);\r\n    if (insertAtResult === -1) {\r\n      return alert('Index out of bounds.');\r\n    }\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handleRemoveAtSLL = () => {\r\n    if (inputIndex.trim() === '' || isNaN(parseInt(inputIndex))) {\r\n      return alert('Please input valid index');\r\n    }\r\n    const removeAtResult = SLL.removeAt(parseInt(inputIndex));\r\n    if (removeAtResult === -1) {\r\n      return alert('Index out of bounds.');\r\n    }\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handleClearSLL = () => {\r\n    if (nodeLength === 0) {\r\n      return alert(\"The list is empty.\");\r\n    }\r\n    if (window.confirm('Would you clear the list?')) {\r\n      SLL.clear();\r\n      handleSetNodeData();\r\n    }\r\n  }\r\n\r\n  const maxLengthColor = () => {\r\n    if (isMaxLength) {\r\n      return { color: 'red' };\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ReturnToHome />\r\n      <div className=\"singly-linked-list\">\r\n        <h1 className=\"sll-header\">Singly Linked List</h1>\r\n        <div className=\"sll-actions\">\r\n          <div className=\"sll-length\">\r\n            Length: <span style={maxLengthColor()}>{nodeLength}</span> / 12\r\n          </div>\r\n          <div className=\"sll-input\">\r\n            <label className=\"sll-input-label\">\r\n              Index:\r\n            <input\r\n                className=\"sll-input-field\"\r\n                type=\"text\"\r\n                value={inputIndex}\r\n                onChange={handleChangeInputIndex}\r\n              />\r\n            </label>\r\n            <label className=\"sll-input-label\">\r\n              Data:\r\n            <input\r\n                className=\"sll-input-field\"\r\n                type=\"text\"\r\n                value={inputData}\r\n                onChange={handleChangeInputData}\r\n              />\r\n            </label>\r\n          </div>\r\n          <div className=\"sll-buttons\">\r\n            <button\r\n              className=\"btn btn-sll-append\"\r\n              type=\"button\"\r\n              onClick={handleAppendSLL}\r\n              disabled={isMaxLength}\r\n            >APPEND</button>\r\n            <button\r\n              className=\"btn btn-sll-pop\"\r\n              type=\"button\"\r\n              onClick={handlePopSLL}\r\n            >POP</button>\r\n            <button\r\n              className=\"btn btn-sll-unshift\"\r\n              type=\"button\"\r\n              onClick={handleUnshiftSLL}\r\n              disabled={isMaxLength}\r\n            >UNSHIFT</button>\r\n            <button\r\n              className=\"btn btn-sll-shift\"\r\n              type=\"button\"\r\n              onClick={handleShiftSLL}\r\n            >SHIFT</button>\r\n            <button\r\n              className=\"btn btn-sll-insertAt\"\r\n              type=\"button\"\r\n              onClick={handleInsertAtSLL}\r\n              disabled={isMaxLength}\r\n            >INSERT AT</button>\r\n            <button\r\n              className=\"btn btn-sll-removeAt\"\r\n              type=\"button\"\r\n              onClick={handleRemoveAtSLL}\r\n            >REMOVE AT</button>\r\n            <button\r\n              className=\"btn btn-sll-clear\"\r\n              type=\"button\"\r\n              onClick={handleClearSLL}\r\n            >CLEAR</button>\r\n          </div>\r\n        </div>\r\n        <div className=\"node-items\">\r\n          <SllCanvas nodes={nodeData} />\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n\r\nexport default SinglyLinkedList;\r\n","import React, { useEffect, useRef } from 'react'\r\n\r\nconst DllCanvas = ({\r\n  nodes\r\n}) => {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const canvasWidth = canvas.offsetWidth;\r\n    const canvasHeight = canvas.offsetHeight;\r\n    canvas.style.width = '100%';\r\n    canvas.style.height = '100%';\r\n    canvas.width = canvasWidth;\r\n    canvas.height = canvasHeight;\r\n\r\n    draw(ctx, nodes, canvasWidth, canvasHeight);\r\n  }, [nodes]);\r\n\r\n  const draw = (ctx, nodes, canvasWidth, canvasHeight) => {\r\n    // define rectangle's width and height with respect to the canvas' size\r\n    let rectWidth;\r\n    let rectHeight;\r\n    let startingPointX;\r\n    let startingPointY;\r\n    let horizArrowLen; // horizontal arrow's length\r\n    let vertArrowLen; // vertical arrow's length\r\n    let fontSize;\r\n    let lineHeightOfData = 20; // line height of data inside of each nodes\r\n    if (canvasWidth >= 1408) { // 1440px wide\r\n      rectWidth = canvasWidth * 0.17;\r\n      rectHeight = canvasHeight * 0.2;\r\n      startingPointX = canvasWidth * 0.01;\r\n      startingPointY = canvasHeight * 0.05;\r\n      horizArrowLen = canvasWidth * 0.1;\r\n      vertArrowLen = canvasHeight * 0.15;\r\n      lineHeightOfData = 22;\r\n      fontSize = 24;\r\n    }\r\n    else if (canvasWidth >= 992) { // 1024px wide\r\n      rectWidth = canvasWidth * 0.1682;\r\n      rectHeight = canvasHeight * 0.1748;\r\n      startingPointX = canvasWidth * 0.01;\r\n      startingPointY = canvasHeight * 0.05;\r\n      horizArrowLen = canvasWidth * 0.1024;\r\n      vertArrowLen = canvasHeight * 0.1878;\r\n      fontSize = 22;\r\n\r\n    }\r\n    else if (canvasWidth >= 736) { // 768px wide\r\n      rectWidth = canvasWidth * 0.1502;\r\n      rectHeight = canvasHeight * 0.1748;\r\n      startingPointX = canvasWidth * 0.01;\r\n      startingPointY = canvasHeight * 0.05;\r\n      horizArrowLen = canvasWidth * 0.1264;\r\n      vertArrowLen = canvasHeight * 0.1878;\r\n      fontSize = 18;\r\n    }\r\n    else if (canvasWidth >= 393) { // 425px wide\r\n      rectWidth = canvasWidth * 0.1799;\r\n      rectHeight = canvasHeight * 0.19;\r\n      startingPointX = canvasWidth * 0.01;\r\n      startingPointY = canvasHeight * 0.05;\r\n      horizArrowLen = canvasWidth * 0.0868;\r\n      vertArrowLen = canvasHeight * 0.165;\r\n      fontSize = 16;\r\n    }\r\n    else { // narrow than 425px\r\n      rectWidth = canvasWidth * 0.1883;\r\n      rectHeight = canvasHeight * 0.1934;\r\n      startingPointX = canvasWidth * 0.01;\r\n      startingPointY = canvasHeight * 0.05;\r\n      horizArrowLen = canvasWidth * 0.0756;\r\n      vertArrowLen = canvasHeight * 0.1599;\r\n      fontSize = 14;\r\n    }\r\n\r\n    const nodeLength = nodes.length;\r\n    const maxWidthOfData = rectWidth * 0.8;  // maximum width of data inside of each nodes\r\n    nodes.forEach((nodeData, i) => {\r\n      ctx.strokeStyle = '#003FFF';\r\n      ctx.fillStyle = '#000';\r\n      ctx.textAlign = 'start';\r\n      ctx.shadowBlur = 2;\r\n      ctx.font = `normal ${fontSize}px sans-serif`;\r\n\r\n      if (i < 4) {\r\n        // x, y point of a rectangle, respectively\r\n        const rectX = startingPointX + (rectWidth + horizArrowLen) * i;\r\n        const rectY = startingPointY;\r\n        // x, y point of print, respectively\r\n        const printX = (startingPointX + rectWidth * 0.1) + (rectWidth + horizArrowLen) * i;\r\n        const printY = startingPointY + (rectHeight * 0.25);\r\n\r\n        ctx.strokeRect(rectX, rectY, rectWidth, rectHeight);\r\n        printData(ctx, nodeData, printX, printY, lineHeightOfData, maxWidthOfData);\r\n\r\n        // print \"head\" text\r\n        ctx.fillStyle = \"red\";\r\n        if (i === 0) {\r\n          const headTextWidth = ctx.measureText('head').width;\r\n          const headTextX = startingPointX + (rectWidth - headTextWidth) / 2; // x point of \"head\" text\r\n          const headTextY = startingPointY * 0.8 // y point of \"head\" text\r\n          ctx.fillText('head', headTextX, headTextY);\r\n        }\r\n        if (i !== 0) {\r\n          // both arrows' \"from\" x point\r\n          const arrowFromX = (startingPointX + rectWidth) + (horizArrowLen + rectWidth) * (i - 1);\r\n          // y point of forward arrow (-->)\r\n          const fArrowY = startingPointY + (rectHeight * 0.333);\r\n          // both arrows' \"to\" x point\r\n          const arrowToX = startingPointX + (rectWidth + horizArrowLen) * i;\r\n          // y point of backward arrow (<--)\r\n          const bArrowY = startingPointY + (rectHeight * 0.667);\r\n\r\n          drawForwardArrow(ctx, arrowFromX, fArrowY, arrowToX, fArrowY);\r\n          drawBackwardArrow(ctx, arrowFromX, bArrowY, arrowToX, bArrowY);\r\n        }\r\n        if (i === nodeLength - 1) { // if the last node, print \"tail\" text\r\n          ctx.fillStyle = \"red\";\r\n          const tailTextWidth = ctx.measureText('tail').width;\r\n          // x point of \"tail\" text\r\n          const tailTextX = startingPointX + (rectWidth - tailTextWidth) / 2 + (rectWidth + horizArrowLen) * i\r\n          // y point of \"tail\" text\r\n          const tailTextY = (startingPointY * 1.65) + rectHeight;\r\n\r\n          ctx.fillText(\"tail\", tailTextX, tailTextY);\r\n        }\r\n      }\r\n      else if (i >= 4 && i < 8) {\r\n        // x, y point of a rectangle, respectively\r\n        const rectX = canvasWidth - (startingPointX + rectWidth) - (horizArrowLen + rectWidth) * (i - 4);\r\n        const rectY = startingPointY + rectHeight + vertArrowLen;\r\n        // x, y point of print, respectively\r\n        const printX = canvasWidth - (startingPointX + rectWidth * 0.9) - (horizArrowLen + rectWidth) * (i - 4);\r\n        const printY = startingPointY + rectHeight * 1.25 + vertArrowLen;\r\n\r\n        ctx.strokeRect(rectX, rectY, rectWidth, rectHeight);\r\n        printData(ctx, nodeData, printX, printY, lineHeightOfData, maxWidthOfData);\r\n\r\n        if (i !== 4) {\r\n          // both arrows' \"from\" x point\r\n          const arrowFromX = canvasWidth - startingPointX - (rectWidth + horizArrowLen) * (i - 4);\r\n          // \"from\" y point of forward arrow (-->)\r\n          const fArrowY = startingPointY + rectHeight * 1.333 + vertArrowLen;\r\n          // both arrows' \"to\" x point\r\n          const arrowToX = canvasWidth - (startingPointX + rectWidth) - (horizArrowLen + rectWidth) * (i - 5);\r\n          // y point of backward arrow (<--)\r\n          const bArrowY = startingPointY + rectHeight * 1.667 + vertArrowLen;\r\n\r\n          drawForwardArrow(ctx, arrowFromX, fArrowY, arrowToX, fArrowY);\r\n          drawBackwardArrow(ctx, arrowFromX, bArrowY, arrowToX, bArrowY);\r\n        }\r\n        else { // vertical arrow\r\n          // vertical forward arrow's (v) x point\r\n          const vertFwArrowX = canvasWidth - startingPointX - (rectWidth * 0.667);\r\n          // vertical backward arrow's (^) x point\r\n          const vertBwArrowX = canvasWidth - startingPointX - (rectWidth * 0.333);\r\n          // vertical arrows' \"from\" y point\r\n          const vertArrowFromY = startingPointY + rectHeight;\r\n          // vertical arrow's \"to\" y point\r\n          const vertArrowToY = startingPointY + rectHeight + vertArrowLen;\r\n\r\n          drawForwardArrow(ctx, vertFwArrowX, vertArrowFromY, vertFwArrowX, vertArrowToY);\r\n          drawBackwardArrow(ctx, vertBwArrowX, vertArrowFromY, vertBwArrowX, vertArrowToY);\r\n        }\r\n        if (i === nodeLength - 1) { // if the last node, print \"tail\" text\r\n          ctx.fillStyle = \"red\";\r\n          const tailTextWidth = ctx.measureText('tail').width;\r\n          // x point of \"tail\" text\r\n          const tailTextX = canvasWidth - startingPointX - tailTextWidth - (rectWidth - tailTextWidth) / 2 - (rectWidth + horizArrowLen) * (i - 4);\r\n          // y point of \"tail\" text\r\n          const tailTextY = (startingPointY * 1.8) + rectHeight * 2 + vertArrowLen;\r\n\r\n          ctx.fillText(\"tail\", tailTextX, tailTextY);\r\n        }\r\n      }\r\n      else if (i >= 8) {\r\n        // x, y point of a rectangle, respectively\r\n        const rectX = startingPointX + (rectWidth + horizArrowLen) * (i - 8);\r\n        const rectY = startingPointY + rectHeight * 2 + vertArrowLen * 2;\r\n        // x, y point of print, respectively\r\n        const printX = (startingPointX + rectWidth * 0.1) + (rectWidth + horizArrowLen) * (i - 8);\r\n        const printY = canvasHeight - (startingPointY + rectHeight * 0.75);\r\n\r\n        ctx.strokeRect(rectX, rectY, rectWidth, rectHeight);\r\n        printData(ctx, nodeData, printX, printY, lineHeightOfData, maxWidthOfData);\r\n        if (i !== 8) {\r\n          // both arrows' \"from\" x point\r\n          const arrowFromX = (startingPointX + rectWidth) + (horizArrowLen + rectWidth) * (i - 9);\r\n          // y point of forward arrow (-->)\r\n          const fArrowY = canvasHeight - (startingPointY + rectHeight * 0.667);\r\n          // both arrows' \"to\" x point\r\n          const arrowToX = startingPointX + (rectWidth + horizArrowLen) * (i - 8);\r\n          // y point of backward arrow (<--)\r\n          const bArrowY = canvasHeight - (startingPointY + rectHeight * 0.333);\r\n\r\n          drawForwardArrow(ctx, arrowFromX, fArrowY, arrowToX, fArrowY);\r\n          drawBackwardArrow(ctx, arrowFromX, bArrowY, arrowToX, bArrowY);\r\n        }\r\n        else { // vertical arrow\r\n          // vertical forward arrow's (v) x point\r\n          const vertFwArrowX = startingPointX + rectWidth * 0.333;\r\n          // vertical backward arrow's (^) x point\r\n          const vertBwArrowX = startingPointX + rectWidth * 0.667;\r\n          // vertical arrows' \"from\" y point\r\n          const vertArrowFromY = canvasHeight - (startingPointY + rectHeight + vertArrowLen);\r\n          // vertical arrow's \"to\" y point\r\n          const vertArrowToY = canvasHeight - (startingPointY + rectHeight);\r\n\r\n          drawForwardArrow(ctx, vertFwArrowX, vertArrowFromY, vertFwArrowX, vertArrowToY);\r\n          drawBackwardArrow(ctx, vertBwArrowX, vertArrowFromY, vertBwArrowX, vertArrowToY);\r\n        }\r\n        if (i === nodeLength - 1) { // if the last node, print \"tail\" text\r\n          ctx.fillStyle = \"red\";\r\n          const tailTextWidth = ctx.measureText('tail').width;\r\n          // x point of \"tail\" text\r\n          const tailTextX = startingPointX + (rectWidth - tailTextWidth) / 2 + (rectWidth + horizArrowLen) * (i - 8);\r\n          // y point of \"tail\" text\r\n          const tailTextY = (startingPointY * 1.65) + rectHeight * 3 + vertArrowLen * 2;\r\n\r\n          ctx.fillText(\"tail\", tailTextX, tailTextY);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  const drawForwardArrow = (ctx, fromX, fromY, toX, toY) => {\r\n    ctx.beginPath();\r\n    let headlen = 9; // length of head in pixels\r\n    let dx = toX - fromX;\r\n    let dy = toY - fromY;\r\n    let angle = Math.atan2(dy, dx);\r\n    ctx.strokeStyle = \"#000\";\r\n    ctx.moveTo(fromX, fromY);\r\n    ctx.lineTo(toX, toY);\r\n    ctx.lineTo(toX - headlen * Math.cos(angle - Math.PI / 6), toY - headlen * Math.sin(angle - Math.PI / 6));\r\n    ctx.moveTo(toX, toY);\r\n    ctx.lineTo(toX - headlen * Math.cos(angle + Math.PI / 6), toY - headlen * Math.sin(angle + Math.PI / 6));\r\n    ctx.stroke();\r\n  }\r\n\r\n  const drawBackwardArrow = (ctx, fromX, fromY, toX, toY) => {\r\n    ctx.beginPath();\r\n    let headlen = 9; // length of head in pixels\r\n    let dx = fromX - toX;\r\n    let dy = fromY - toY;\r\n    let angle = Math.atan2(dy, dx);\r\n    ctx.strokeStyle = \"#000\";\r\n    ctx.moveTo(toX, toY);\r\n    ctx.lineTo(fromX, fromY);\r\n    ctx.lineTo(fromX - headlen * Math.cos(angle - Math.PI / 6), fromY - headlen * Math.sin(angle - Math.PI / 6));\r\n    ctx.moveTo(fromX, fromY);\r\n    ctx.lineTo(fromX - headlen * Math.cos(angle + Math.PI / 6), fromY - headlen * Math.sin(angle + Math.PI / 6));\r\n    ctx.stroke();\r\n  }\r\n\r\n  function printData(context, text, x, y, lineHeight, fitWidth = 0, lineNum = 0) {\r\n    // if text's width is 0, no need to wrap data\r\n    if (fitWidth <= 0) {\r\n      context.fillText(text, x, y);\r\n      return;\r\n    }\r\n\r\n    // divide data until the substring's width is longer than the specified width\r\n    for (let i = 1; i <= text.length; i++) {\r\n      let str = text.substr(0, i);\r\n      if (context.measureText(str).width > fitWidth) {\r\n        if (lineNum < 5) { // truncate data from line number 6\r\n          context.fillText(text.substr(0, i - 1), x, y);\r\n        }\r\n        else {\r\n          context.fillText('', x, y);\r\n        }\r\n        printData(context, text.substr(i - 1), x, y + lineHeight, lineHeight, fitWidth, lineNum + 1);\r\n        return;\r\n      }\r\n    }\r\n    if (lineNum < 5) { // truncate data from line number 6\r\n      context.fillText(text, x, y);\r\n    }\r\n    else {\r\n      context.fillText('', x, y);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <canvas ref={canvasRef}></canvas>\r\n  );\r\n}\r\n\r\nexport default DllCanvas;\r\n","class Node {\r\n  constructor(_data = null, _prev = null, _next = null) {\r\n    this.prev = _prev;\r\n    this.next = _next;\r\n    this.data = _data;\r\n  }\r\n}\r\n\r\nclass DLinkedList {\r\n  constructor() {\r\n    this.head = null\r\n    this.tail = null;\r\n    this.length = 0;\r\n  }\r\n\r\n  // add data to the last place of the list\r\n  append(data) {\r\n    const newNode = new Node(data);\r\n    if (this.length === 0) {\r\n      this.head = this.tail = newNode;\r\n    }\r\n    else {\r\n      newNode.prev = this.tail;\r\n      this.tail.next = newNode;\r\n      this.tail = newNode;\r\n    }\r\n    this.length++;\r\n  }\r\n\r\n  // remove data at the last place of the list\r\n  pop() {\r\n    if (this.length === 0) {\r\n      console.log(\"The list is empty. Cannot pop().\");\r\n      return;\r\n    }\r\n    else if (this.length === 1) {\r\n      this.head = this.tail = null;\r\n    }\r\n    else {\r\n      this.tail.prev.next = null;\r\n      this.tail = this.tail.prev;\r\n    }\r\n    this.length--;\r\n  }\r\n\r\n  // add data to the first place of the list\r\n  unshift(data) {\r\n    const newNode = new Node(data);\r\n    if (this.length === 0) {\r\n      this.head = this.tail = newNode;\r\n    }\r\n    else {\r\n      newNode.next = this.head;\r\n      this.head.prev = newNode;\r\n      this.head = newNode;\r\n    }\r\n    this.length++;\r\n  }\r\n\r\n  // remove data at the first place of the list\r\n  shift() {\r\n    if (this.length === 0) {\r\n      console.log(\"The list is empty. Cannot shift().\");\r\n      return;\r\n    }\r\n    else if (this.length === 1) {\r\n      this.head = this.tail = null;\r\n    }\r\n    else {\r\n      this.head.next.prev = null;\r\n      this.head = this.head.next;\r\n    }\r\n    this.length--;\r\n  }\r\n\r\n  // insert data into the specified index\r\n  insertAt(insertIndex, data) {\r\n    if (insertIndex < 0 || insertIndex > this.length) {\r\n      console.log(\"Insert index out of bounds.\");\r\n      return -1;\r\n    }\r\n    else if (insertIndex === 0) {\r\n      return this.unshift(data);\r\n    }\r\n    else if (insertIndex === this.length) {\r\n      return this.append(data);\r\n    }\r\n    else {\r\n      const newNode = new Node(data);\r\n      let oneBeforeInsertNode = this.head;\r\n      for (let i = 0; i < insertIndex - 1; i++) {\r\n        oneBeforeInsertNode = oneBeforeInsertNode.next;\r\n      }\r\n      newNode.prev = oneBeforeInsertNode;\r\n      newNode.next = oneBeforeInsertNode.next;\r\n      oneBeforeInsertNode.next.prev = newNode;\r\n      oneBeforeInsertNode.next = newNode;\r\n      this.length++;\r\n    }\r\n  }\r\n\r\n  // remove data from the specified index\r\n  removeAt(removeIndex) {\r\n    if (removeIndex < 0 || removeIndex >= this.length) {\r\n      console.log(\"Remove index out of bounds.\");\r\n      return -1;\r\n    }\r\n    else if (this.length === 0) {\r\n      console.log(\"The list is empty. Cannot removeAt().\");\r\n      return;\r\n    }\r\n    else if (removeIndex === 0) {\r\n      return this.shift();\r\n    }\r\n    else if (removeIndex === this.length - 1) {\r\n      return this.pop();\r\n    }\r\n    else {\r\n      let oneBeforeRemoveNode = this.head;\r\n      for (let i = 0; i < removeIndex - 1; i++) {\r\n        oneBeforeRemoveNode = oneBeforeRemoveNode.next;\r\n      }\r\n      oneBeforeRemoveNode.next = oneBeforeRemoveNode.next.next;\r\n      oneBeforeRemoveNode.next.next.prev = oneBeforeRemoveNode;\r\n      this.length--;\r\n    }\r\n  }\r\n\r\n  // return node's index if found\r\n  search(value) {\r\n    let currentNode = this.head;\r\n    let index = 0;\r\n\r\n    while (currentNode) {\r\n      if (currentNode.data === value) {\r\n        return index;\r\n      }\r\n      currentNode = currentNode.next;\r\n      index++;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  clear() {\r\n    this.head = this.tail = null;\r\n    this.length = 0;\r\n  }\r\n\r\n  print() {\r\n    let currentNode = this.head;\r\n    while (currentNode) {\r\n      console.log(currentNode.data);\r\n      currentNode = currentNode.next;\r\n    }\r\n  }\r\n\r\n  getLength() {\r\n    return this.length;\r\n  }\r\n\r\n  // return all node data in the form of an array for rendering\r\n  getAllNodesForRender() {\r\n    const nodes = [];\r\n    let currentNode = this.head;\r\n    while (currentNode) {\r\n      nodes.push(currentNode.data);\r\n      currentNode = currentNode.next;\r\n    }\r\n\r\n    return nodes;\r\n  }\r\n}\r\n\r\nexport const DLL = new DLinkedList();\r\n\r\n// const myDoublyLinkedList = new DLinkedList(1);\r\n// myDoublyLinkedList.shift();\r\n// myDoublyLinkedList.append(2);\r\n// myDoublyLinkedList.append(3);\r\n// myDoublyLinkedList.unshift(100);\r\n// myDoublyLinkedList.append(4);\r\n// myDoublyLinkedList.insertAt(4, 'a');\r\n\r\n// myDoublyLinkedList.removeAt(2);\r\n\r\n// myDoublyLinkedList.clear();\r\n\r\n// myDoublyLinkedList.print();","import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\n\r\nimport ReturnToHome from '../ReturnToHome';\r\nimport DllCanvas from './DllCanvas';\r\nimport { DLL } from './DLL_class';\r\nimport './doublyLinkedList.css';\r\n\r\nconst DoublyLinkedList = () => {\r\n  let location = useLocation();\r\n  const [nodeData, setNodeData] = useState([]);\r\n  const [nodeLength, setNodeLength] = useState(0);\r\n  const [isMaxLength, setIsMaxLength] = useState(false);\r\n  const [inputData, setInputData] = useState('');\r\n  const [inputIndex, setInputIndex] = useState('');\r\n\r\n  useEffect(() => { // clear list when a user changes route\r\n    DLL.clear();\r\n    handleSetNodeData();\r\n  }, [location]);\r\n\r\n  useEffect(() => {\r\n    if (nodeLength >= 12) {\r\n      setIsMaxLength(true);\r\n    }\r\n    else {\r\n      setIsMaxLength(false);\r\n    }\r\n  }, [nodeLength]);\r\n\r\n  const handleChangeInputData = (e) => {\r\n    setInputData(e.target.value);\r\n  }\r\n\r\n  const handleChangeInputIndex = (e) => {\r\n    setInputIndex(e.target.value);\r\n  }\r\n\r\n  const handleSetNodeData = () => {\r\n    setNodeData(DLL.getAllNodesForRender());\r\n    setNodeLength(DLL.getLength());\r\n    setInputData('');\r\n    setInputIndex('');\r\n  }\r\n\r\n  const handleAppendDLL = () => {\r\n    if (inputData.trim() === '') {\r\n      return alert('Please input valid data.');\r\n    }\r\n    DLL.append(inputData);\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handlePopDLL = () => {\r\n    if (nodeLength === 0) {\r\n      return alert(\"The list is empty.\");\r\n    }\r\n    DLL.pop();\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handleUnshiftDLL = () => {\r\n    if (inputData.trim() === '') {\r\n      return alert('Please input valid data');\r\n    }\r\n    DLL.unshift(inputData);\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handleShiftDLL = () => {\r\n    if (nodeLength === 0) {\r\n      return alert(\"The list is empty.\");\r\n    }\r\n    DLL.shift();\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handleInsertAtDLL = () => {\r\n    if (inputIndex.trim() === '' || isNaN(parseInt(inputIndex))) {\r\n      return alert('Please input valid index');\r\n    }\r\n    if (inputData.trim() === '') {\r\n      return alert('Please input valid data');\r\n    }\r\n\r\n    const insertAtResult = DLL.insertAt(parseInt(inputIndex), inputData);\r\n    if (insertAtResult === -1) {\r\n      return alert('Index out of bounds.');\r\n    }\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handleRemoveAtDLL = () => {\r\n    if (inputIndex.trim() === '' || isNaN(parseInt(inputIndex))) {\r\n      return alert('Please input valid index');\r\n    }\r\n    const removeAtResult = DLL.removeAt(parseInt(inputIndex));\r\n    if (removeAtResult === -1) {\r\n      return alert('Index out of bounds.');\r\n    }\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handleClearDLL = () => {\r\n    if (nodeLength === 0) {\r\n      return alert(\"The list is empty.\");\r\n    }\r\n    if (window.confirm('Would you like to clear the list?')) {\r\n      DLL.clear();\r\n      handleSetNodeData();\r\n    }\r\n  }\r\n\r\n  const maxLengthColor = () => {\r\n    if (isMaxLength) {\r\n      return { color: 'red' };\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ReturnToHome />\r\n      <div className=\"doubly-linked-list\">\r\n        <h1 className=\"dll-header\">Doubly Linked List</h1>\r\n        <div className=\"dll-actions\">\r\n          <div className=\"dll-length\">\r\n            Length: <span style={maxLengthColor()}>{nodeLength}</span> / 12\r\n          </div>\r\n          <div className=\"dll-input\">\r\n            <label className=\"dll-input-label\">\r\n              Index:\r\n            <input\r\n                className=\"dll-input-field\"\r\n                type=\"text\"\r\n                value={inputIndex}\r\n                onChange={handleChangeInputIndex}\r\n              />\r\n            </label>\r\n            <label className=\"dll-input-label\">\r\n              Data:\r\n            <input\r\n                className=\"dll-input-field\"\r\n                type=\"text\"\r\n                value={inputData}\r\n                onChange={handleChangeInputData}\r\n              />\r\n            </label>\r\n          </div>\r\n          <div className=\"dll-buttons\">\r\n            <button\r\n              className=\"btn btn-dll-append\"\r\n              type=\"button\"\r\n              onClick={handleAppendDLL}\r\n              disabled={isMaxLength}\r\n            >APPEND</button>\r\n            <button\r\n              className=\"btn btn-dll-pop\"\r\n              type=\"button\"\r\n              onClick={handlePopDLL}\r\n            >POP</button>\r\n            <button\r\n              className=\"btn btn-dll-unshift\"\r\n              type=\"button\"\r\n              onClick={handleUnshiftDLL}\r\n              disabled={isMaxLength}\r\n            >UNSHIFT</button>\r\n            <button\r\n              className=\"btn btn-dll-shift\"\r\n              type=\"button\"\r\n              onClick={handleShiftDLL}\r\n            >SHIFT</button>\r\n            <button\r\n              className=\"btn btn-dll-insertAt\"\r\n              type=\"button\"\r\n              onClick={handleInsertAtDLL}\r\n              disabled={isMaxLength}\r\n            >INSERT AT</button>\r\n            <button\r\n              className=\"btn btn-dll-removeAt\"\r\n              type=\"button\"\r\n              onClick={handleRemoveAtDLL}\r\n            >REMOVE AT</button>\r\n            <button\r\n              className=\"btn btn-dll-clear\"\r\n              type=\"button\"\r\n              onClick={handleClearDLL}\r\n            >CLEAR</button>\r\n          </div>\r\n        </div>\r\n        <div className=\"node-items\">\r\n          <DllCanvas\r\n            nodes={nodeData}\r\n          />\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n\r\n  );\r\n}\r\n\r\n\r\nexport default DoublyLinkedList;\r\n","import React, { useEffect, useRef } from 'react'\r\n\r\nconst StackCanvas = ({ stackItems }) => {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const canvasWidth = canvas.offsetWidth;\r\n    const canvasHeight = canvas.offsetHeight;\r\n    canvas.style.width = '100%';\r\n    canvas.style.height = '100%';\r\n    canvas.width = canvasWidth;\r\n    canvas.height = canvasHeight;\r\n\r\n    draw(ctx, canvasWidth, canvasHeight);\r\n\r\n  }, [stackItems]);\r\n\r\n  const draw = (ctx, canvasWidth, canvasHeight) => {\r\n    let startingPointX;\r\n    let startingPointY;\r\n    let containerWidth;\r\n    let containerHeight;\r\n    let fontSize = 14;\r\n\r\n    if (canvasWidth >= 1408) { // 1440px wide of display\r\n      startingPointX = canvasWidth * 0.35;\r\n      startingPointY = canvasHeight * 0.025;\r\n      containerWidth = canvasWidth * 0.3;\r\n      containerHeight = canvasHeight * 0.95;\r\n      // fontSize = 20;\r\n    }\r\n    else if (canvasWidth >= 992) { // 1024px wide of display\r\n      startingPointX = canvasWidth * 0.25;\r\n      startingPointY = canvasHeight * 0.025;\r\n      containerWidth = canvasWidth * 0.5;\r\n      containerHeight = canvasHeight * 0.95;\r\n    }\r\n    else if (canvasWidth >= 736) { // 768px wide of display\r\n      startingPointX = canvasWidth * 0.20;\r\n      startingPointY = canvasHeight * 0.025;\r\n      containerWidth = canvasWidth * 0.6;\r\n      containerHeight = canvasHeight * 0.95;\r\n    }\r\n    else if (canvasWidth >= 393) { // 425px wide of display\r\n      startingPointX = canvasWidth * 0.17;\r\n      startingPointY = canvasHeight * 0.025;\r\n      containerWidth = canvasWidth * 0.66;\r\n      containerHeight = canvasHeight * 0.95;\r\n    }\r\n    else { // narrower than 425px wide\r\n      startingPointX = canvasWidth * 0.13;\r\n      startingPointY = canvasHeight * 0.025;\r\n      containerWidth = canvasWidth * 0.74;\r\n      containerHeight = canvasHeight * 0.95;\r\n    }\r\n\r\n    stackItems.forEach((stackData, i) => {\r\n      ctx.textAlign = 'start';\r\n      ctx.font = `normal ${fontSize}px sans-serif`;\r\n\r\n      if (i === 0) { // draw container only if it's first time to render\r\n        drawStackContainer(ctx, startingPointX, startingPointY, containerWidth, containerHeight);\r\n      }\r\n\r\n      // each stack item's size property\r\n      const stackItemGap = containerHeight * 0.01;\r\n      const stackItemWidth = containerWidth * 0.88;\r\n      const stackItemHeight = containerHeight * 0.09;\r\n\r\n      // \"staring x, y point of each stack item\"\r\n      const stackItemStartX = startingPointX + containerWidth * 0.06;\r\n      const stackItemStartY = canvasHeight - startingPointY - (stackItemGap + stackItemHeight) * (i + 1);\r\n      drawStackItem(ctx, stackItemWidth, stackItemHeight, stackItemStartX, stackItemStartY);\r\n\r\n      const printX = startingPointX + containerWidth * 0.1;\r\n      const printY = canvasHeight - startingPointY - (stackItemGap + stackItemHeight * 0.7) - (stackItemGap + stackItemHeight) * i;\r\n      const maxWidthOfData = stackItemWidth * 0.9;  // maximum width of data inside of each nodes\r\n\r\n      printData(ctx, stackData, printX, printY, 18, maxWidthOfData);\r\n    });\r\n  }\r\n\r\n  const drawStackContainer = (ctx, startX, startY, containerWidth, containerHeight) => {\r\n    ctx.lineWidth = 7;\r\n    // left side of the stack container\r\n    ctx.moveTo(startX, startY);\r\n    ctx.lineTo(startX, startY + containerHeight);\r\n\r\n    // bottom of the stack container\r\n    // to fill the gap at the bottom left & right corner of the container, +- 3.5\r\n    ctx.moveTo(startX - 3.5, startY + containerHeight);\r\n    ctx.lineTo(startX + containerWidth + 3.5, startY + containerHeight);\r\n\r\n    // right side of the stack container\r\n    ctx.moveTo(startX + containerWidth, startY + containerHeight);\r\n    ctx.lineTo(startX + containerWidth, startY);\r\n\r\n    ctx.stroke();\r\n  }\r\n\r\n  const drawStackItem = (ctx, stackItemWidth, stackItemHeight, stackItemStartX, stackItemStartY) => {\r\n    ctx.fillStyle = \"#F18677\";\r\n    ctx.fillRect(stackItemStartX, stackItemStartY, stackItemWidth, stackItemHeight);\r\n  }\r\n\r\n  function printData(context, text, x, y, lineHeight, fitWidth = 0, lineNum = 0) {\r\n    context.fillStyle = \"#000\";\r\n\r\n    // if text's width is 0, no need to wrap data\r\n    if (fitWidth <= 0) {\r\n      context.fillText(text, x, y);\r\n      return;\r\n    }\r\n\r\n    // divide data until the substring's width is longer than the specified width\r\n    for (let i = 1; i <= text.length; i++) {\r\n      let str = text.substr(0, i);\r\n      if (context.measureText(str).width > fitWidth) {\r\n        if (lineNum < 3) { // truncate data from line number 6\r\n          context.fillText(text.substr(0, i - 1), x, y);\r\n        }\r\n        else {\r\n          context.fillText('', x, y);\r\n        }\r\n        printData(context, text.substr(i - 1), x, y + lineHeight, lineHeight, fitWidth, lineNum + 1);\r\n        return;\r\n      }\r\n    }\r\n    if (lineNum < 3) { // truncate data from line number 6\r\n      context.fillText(text, x, y);\r\n    }\r\n    else {\r\n      context.fillText('', x, y);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <canvas ref={canvasRef}></canvas>\r\n  )\r\n}\r\n\r\nexport default StackCanvas;\r\n","// Doubly linked list-based stack\r\n\r\nclass Node {\r\n  constructor(_data = null, _prev = null, _next = null) {\r\n    this.data = _data;\r\n    this.prev = _prev;\r\n    this.next = _next;\r\n  }\r\n}\r\n\r\nclass Stack {\r\n  constructor() {\r\n    this.top = null;\r\n    this.size = 0;\r\n  }\r\n\r\n  push(data) {\r\n    const newData = new Node(data);\r\n    if (this.size === 0) {\r\n      this.top = newData;\r\n    }\r\n    else {\r\n      newData.prev = this.top;\r\n      this.top.next = newData;\r\n      this.top = newData;\r\n    }\r\n    this.size++;\r\n  }\r\n\r\n  pop() {\r\n    if (this.size === 0) {\r\n      return console.log('The stack is empty. Cannot pop().');\r\n    }\r\n    else if (this.size === 1) {\r\n      this.top = null;\r\n    }\r\n    else {\r\n      this.top = this.top.prev;\r\n      this.top.next = null;\r\n    }\r\n    this.size--;\r\n  }\r\n\r\n  getSize() {\r\n    return this.size;\r\n  }\r\n\r\n  // get the top element's data\r\n  peek() {\r\n    return this.top.data;\r\n  }\r\n\r\n  print() {\r\n    let currentNode = this.top;\r\n    while (currentNode !== null) {\r\n      console.log(currentNode.data);\r\n      currentNode = currentNode.prev;\r\n    }\r\n  }\r\n\r\n  clear() {\r\n    if (this.size === 0) {\r\n      return console.log('The stack is empty. Cannot clear().');\r\n    }\r\n    else {\r\n      this.top = null;\r\n      this.size = 0;\r\n    }\r\n  }\r\n\r\n  // return all node data in the form of an array for rendering\r\n  getAllNodesForRender() {\r\n    const nodes = [];\r\n    let currentNode = this.top;\r\n    // push nodes from top to bottom order\r\n    while (currentNode) {\r\n      nodes.push(currentNode.data);\r\n      currentNode = currentNode.prev;\r\n    }\r\n\r\n    // reverse for bottom to top order\r\n    return nodes.reverse();\r\n  }\r\n}\r\n\r\nexport const STACK = new Stack();\r\n\r\n// STACK.push(1);\r\n// STACK.push(2);\r\n// STACK.pop();\r\n// STACK.push(3);\r\n\r\n// // console.log(STACK.peek());\r\n\r\n// // STACK.clear();\r\n\r\n// console.log(STACK.getAllNodesForRender());","import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nimport ReturnToHome from '../ReturnToHome';\r\nimport StackCanvas from './StackCanvas';\r\nimport { STACK } from './Stack_class';\r\nimport './stack.css';\r\n\r\nconst Stack = () => {\r\n  let location = useLocation();\r\n  const [stackData, setStackData] = useState([]);\r\n  const [stackSize, setStackSize] = useState(0);\r\n  const [isMaxSize, setIsMaxSize] = useState(false);\r\n  const [inputData, setInputData] = useState('');\r\n\r\n  useEffect(() => { // clear stack when a user changes route\r\n    STACK.clear();\r\n    handleSetStackData();\r\n  }, [location]);\r\n\r\n  useEffect(() => {\r\n    if (stackSize >= 10) {\r\n      setIsMaxSize(true);\r\n    }\r\n    else {\r\n      setIsMaxSize(false);\r\n    }\r\n  }, [stackSize]);\r\n\r\n  const handleChangeInputData = (e) => {\r\n    setInputData(e.target.value);\r\n  }\r\n\r\n  const handleSetStackData = () => {\r\n    setStackData(STACK.getAllNodesForRender());\r\n    setStackSize(STACK.getSize());\r\n    setInputData('');\r\n  }\r\n\r\n\r\n  const handlePushStack = () => {\r\n    if (inputData.trim() === '') {\r\n      return alert('Please input valid data.');\r\n    }\r\n    STACK.push(inputData);\r\n    handleSetStackData();\r\n  }\r\n\r\n  const handlePopStack = () => {\r\n    if (stackSize === 0) {\r\n      return alert(\"The stack is empty.\");\r\n    }\r\n    STACK.pop();\r\n    handleSetStackData();\r\n  }\r\n\r\n  const handleClearStack = () => {\r\n    if (stackSize === 0) {\r\n      return alert(\"The stack is empty.\");\r\n    }\r\n    if (window.confirm('Would you like to clear the stack?')) {\r\n      STACK.clear();\r\n      handleSetStackData();\r\n    }\r\n  }\r\n\r\n  const maxSizeColor = () => {\r\n    if (isMaxSize) {\r\n      return { color: 'red' };\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ReturnToHome />\r\n      <div className=\"stack-container\">\r\n        <h1 className=\"stack-header\">Stack</h1>\r\n        <div className=\"stack-actions\">\r\n          <div className=\"stack-size\">\r\n            Size: <span style={maxSizeColor()}>{stackSize}</span> / 10\r\n          </div>\r\n          <div className=\"stack-input\">\r\n            <label className=\"stack-input-label\">\r\n              Data:\r\n              <input\r\n                className=\"stack-input-field\"\r\n                type=\"text\"\r\n                value={inputData}\r\n                onChange={handleChangeInputData}\r\n              />\r\n            </label>\r\n          </div>\r\n          <div className=\"stack-buttons\">\r\n            <button\r\n              className=\"btn btn-stack-push\"\r\n              type=\"button\"\r\n              onClick={handlePushStack}\r\n              disabled={isMaxSize}\r\n            >\r\n              PUSH\r\n            </button>\r\n            <button\r\n              className=\"btn btn-stack-pop\"\r\n              type=\"button\"\r\n              onClick={handlePopStack}\r\n            >\r\n              POP\r\n            </button>\r\n            <button\r\n              className=\"btn btn-stack-clear\"\r\n              type=\"button\"\r\n              onClick={handleClearStack}\r\n            >\r\n              CLEAR\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"stack-items\">\r\n          <StackCanvas stackItems={stackData} />\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Stack;\r\n","import React, { useEffect, useRef } from 'react'\r\n\r\nconst QueueCanvas = ({ queueItems }) => {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const canvasWidth = canvas.offsetWidth;\r\n    const canvasHeight = canvas.offsetHeight;\r\n    canvas.style.width = '100%';\r\n    canvas.style.height = '100%';\r\n    canvas.width = canvasWidth;\r\n    canvas.height = canvasHeight;\r\n\r\n    draw(ctx, canvasWidth, canvasHeight);\r\n\r\n  }, [queueItems]);\r\n\r\n  const draw = (ctx, canvasWidth, canvasHeight) => {\r\n    let startingPointX;\r\n    let startingPointY;\r\n    let containerWidth;\r\n    let containerHeight;\r\n    let fontSize = 16;\r\n\r\n    if (canvasWidth >= 1408) { // 1440px wide of display\r\n      startingPointX = canvasWidth * 0.1;\r\n      startingPointY = canvasHeight * 0.1;\r\n      containerWidth = canvasWidth * 0.8;\r\n      containerHeight = canvasHeight * 0.5;\r\n    }\r\n    else if (canvasWidth >= 992) { // 1024px wide of display\r\n      startingPointX = canvasWidth * 0.08;\r\n      startingPointY = canvasHeight * 0.1;\r\n      containerWidth = canvasWidth * 0.84;\r\n      containerHeight = canvasHeight * 0.5;\r\n    }\r\n    else if (canvasWidth >= 736) { // 768px wide of display\r\n      startingPointX = canvasWidth * 0.06;\r\n      startingPointY = canvasHeight * 0.1;\r\n      containerWidth = canvasWidth * 0.88;\r\n      containerHeight = canvasHeight * 0.5;\r\n    }\r\n    else if (canvasWidth >= 393) { // 425px wide of display\r\n      startingPointX = canvasWidth * 0.03;\r\n      startingPointY = canvasHeight * 0.1;\r\n      containerWidth = canvasWidth * 0.94;\r\n      containerHeight = canvasHeight * 0.5;\r\n    }\r\n    else { // narrower than 425px wide\r\n      startingPointX = canvasWidth * 0.02;\r\n      startingPointY = canvasHeight * 0.1;\r\n      containerWidth = canvasWidth * 0.96;\r\n      containerHeight = canvasHeight * 0.5;\r\n    }\r\n\r\n    const queueSize = queueItems.length - 1;\r\n    queueItems.forEach((queueData, i) => {\r\n      ctx.textAlign = 'start';\r\n      ctx.font = `normal ${fontSize}px sans-serif`;\r\n\r\n      // each queue item's size property\r\n      const queueItemGap = containerWidth * 0.01;\r\n      const queueItemWidth = containerWidth * 0.091;\r\n      const queueItemHeight = containerHeight * 0.86;\r\n\r\n      // \"staring x, y point of each queue item\"\r\n      const queueItemStartX = startingPointX + (queueItemGap + queueItemWidth) * i;\r\n      const queueItemStartY = startingPointY + containerHeight * 0.07;\r\n\r\n      if (i === 0) { // draw container only if it's first time to render\r\n        if (canvasWidth >= 1408) {\r\n          const leftArrowX = 30;\r\n          const rightArrowX = startingPointX + containerWidth + 30;\r\n          const ArrowY = startingPointY + containerHeight / 2;\r\n          // backward arrow (<-) at the left side\r\n          drawBackwardArrow(ctx, leftArrowX, ArrowY, leftArrowX + 60, ArrowY);\r\n          // backward arrow (<-) at the right side\r\n          drawBackwardArrow(ctx, rightArrowX, ArrowY, rightArrowX + 60, ArrowY);\r\n        }\r\n        drawQueueContainer(ctx, startingPointX, startingPointY, containerWidth, containerHeight);\r\n        // draw 'front' text above the container\r\n        drawFrontText(ctx, startingPointX, startingPointY - 10, queueItemWidth);\r\n      }\r\n\r\n      drawQueueItem(ctx, queueItemWidth, queueItemHeight, queueItemStartX, queueItemStartY);\r\n\r\n      const printX = startingPointX + queueItemWidth * 0.07 + (queueItemGap + queueItemWidth) * i;\r\n      const printY = startingPointY + containerHeight * 0.15;\r\n      const maxWidthOfData = queueItemWidth * 0.9;  // maximum width of data inside of each nodes\r\n\r\n      printData(ctx, queueData, printX, printY, 18, maxWidthOfData);\r\n\r\n      if (i === queueSize) {\r\n        // draw 'rear' text below the container\r\n        drawRearText(ctx, startingPointX, startingPointY, queueItemWidth, queueItemGap, containerHeight, i);\r\n      }\r\n    });\r\n  }\r\n\r\n  const drawQueueContainer = (ctx, startX, startY, containerWidth, containerHeight) => {\r\n    ctx.lineWidth = 7;\r\n    ctx.beginPath();\r\n    // upper side of the queue container\r\n    ctx.moveTo(startX, startY);\r\n    ctx.lineTo(startX + containerWidth, startY);\r\n\r\n    // bottom side of the queue container\r\n    ctx.moveTo(startX, startY + containerHeight);\r\n    ctx.lineTo(startX + containerWidth, startY + containerHeight);\r\n\r\n    ctx.stroke();\r\n  }\r\n\r\n  const drawQueueItem = (ctx, queueItemWidth, queueItemHeight, queueItemStartX, queueItemStartY) => {\r\n    ctx.fillStyle = \"#F18677\";\r\n    ctx.fillRect(queueItemStartX, queueItemStartY, queueItemWidth, queueItemHeight);\r\n  }\r\n\r\n  function printData(context, text, x, y, lineHeight, fitWidth = 0, lineNum = 0) {\r\n    context.fillStyle = \"#000\";\r\n\r\n    // if text's width is 0, no need to wrap data\r\n    if (fitWidth <= 0) {\r\n      context.fillText(text, x, y);\r\n      return;\r\n    }\r\n\r\n    // divide data until the substring's width is longer than the specified width\r\n    for (let i = 1; i <= text.length; i++) {\r\n      let str = text.substr(0, i);\r\n      if (context.measureText(str).width > fitWidth) {\r\n        if (lineNum < 15) { // truncate data from line number 15\r\n          context.fillText(text.substr(0, i - 1), x, y);\r\n        }\r\n        else {\r\n          context.fillText('', x, y);\r\n        }\r\n        printData(context, text.substr(i - 1), x, y + lineHeight, lineHeight, fitWidth, lineNum + 1);\r\n        return;\r\n      }\r\n    }\r\n    if (lineNum < 15) { // truncate data from line number 15\r\n      context.fillText(text, x, y);\r\n    }\r\n    else {\r\n      context.fillText('', x, y);\r\n    }\r\n  }\r\n\r\n  const drawFrontText = (ctx, startX, startY, itemWidth) => {\r\n    ctx.fillStyle = 'red';\r\n\r\n    const frontTextWidth = ctx.measureText('front').width;\r\n    const frontX = startX + (itemWidth - frontTextWidth) / 2;\r\n    const frontY = startY;\r\n    ctx.fillText('Front', frontX, frontY);\r\n  }\r\n\r\n  const drawRearText = (ctx, startX, startY, itemWidth, itemGap, containerHeight, index) => {\r\n    ctx.fillStyle = 'red';\r\n\r\n    const rearTextWidth = ctx.measureText('Rear').width;\r\n    const rearX = startX + (itemWidth - rearTextWidth) / 2 + (itemGap + itemWidth) * index;\r\n    const rearY = startY + containerHeight + 20;\r\n\r\n    ctx.fillText('Rear', rearX, rearY);\r\n  }\r\n\r\n  const drawBackwardArrow = (ctx, fromX, fromY, toX, toY) => {\r\n    ctx.beginPath();\r\n    let headlen = 9; // length of head in pixels\r\n    let dx = fromX - toX;\r\n    let dy = fromY - toY;\r\n    let angle = Math.atan2(dy, dx);\r\n    ctx.strokeStyle = \"#000\";\r\n    ctx.moveTo(toX, toY);\r\n    ctx.lineTo(fromX, fromY);\r\n    ctx.lineTo(fromX - headlen * Math.cos(angle - Math.PI / 6), fromY - headlen * Math.sin(angle - Math.PI / 6));\r\n    ctx.moveTo(fromX, fromY);\r\n    ctx.lineTo(fromX - headlen * Math.cos(angle + Math.PI / 6), fromY - headlen * Math.sin(angle + Math.PI / 6));\r\n    ctx.stroke();\r\n  }\r\n\r\n  return (\r\n    <canvas ref={canvasRef}></canvas>\r\n  )\r\n}\r\n\r\nexport default QueueCanvas;\r\n","/* implemented queue data structure by circular linked list */\r\n\r\nclass Node {\r\n  constructor(_data = null) {\r\n    this.data = _data;\r\n    this.prev = null;\r\n    this.next = null;\r\n  }\r\n}\r\n\r\nclass Queue {\r\n  constructor() {\r\n    this.front = null;\r\n    this.rear = null;\r\n    this.size = 0;\r\n  }\r\n\r\n  enqueue(data) {\r\n    const newData = new Node(data);\r\n    if (this.size === 0) {\r\n      this.front = this.rear = newData;\r\n      newData.next = newData.prev = newData;\r\n    }\r\n    else {\r\n      newData.next = this.front;\r\n      newData.prev = this.rear;\r\n      this.rear.next = newData;\r\n      this.front.prev = newData;\r\n      this.rear = newData;\r\n    }\r\n    this.size++;\r\n  }\r\n\r\n  dequeue() {\r\n    if (this.size === 0) {\r\n      return console.log('The queue is empty. Cannot dequeue().');\r\n    }\r\n    else if (this.size === 1) {\r\n      this.front = this.rear = null;\r\n    }\r\n    else {\r\n      this.front.next.prev = this.rear;\r\n      this.rear.next = this.front.next;\r\n      this.front = this.front.next;\r\n    }\r\n    this.size--;\r\n  }\r\n\r\n  getSize() {\r\n    return this.size;\r\n  }\r\n\r\n  print() {\r\n    if (this.size === 0) {\r\n      return console.log('The queue is empty.');\r\n    }\r\n\r\n    let currentNode = this.front;\r\n    do {\r\n      console.log(currentNode.data);\r\n      currentNode = currentNode.next;\r\n    }\r\n    while (currentNode !== this.front);\r\n  }\r\n\r\n  clear() {\r\n    if (this.size === 0) {\r\n      return console.log('The queue is empty. Cannot clear().');\r\n    }\r\n\r\n    this.front = this.rear = null;\r\n    this.size = 0;\r\n  }\r\n\r\n  getAllNodesForRender() {\r\n    const nodes = [];\r\n    let currentNode = this.front;\r\n\r\n\r\n    if (currentNode) { // if the queue's size is not 0\r\n      do {\r\n        nodes.push(currentNode.data);\r\n        currentNode = currentNode.next;\r\n      }\r\n      while (currentNode !== this.front);\r\n    }\r\n    return nodes;\r\n  }\r\n}\r\n\r\nexport const QUEUE = new Queue();\r\n\r\n// QUEUE.enqueue(1);\r\n// QUEUE.enqueue(2);\r\n// QUEUE.enqueue(3);\r\n\r\n// QUEUE.dequeue();\r\n\r\n// QUEUE.enqueue('a');\r\n\r\n// console.log(QUEUE.getAllNodesForRender());","import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nimport ReturnToHome from '../ReturnToHome';\r\nimport QueueCanvas from './QueueCanvas';\r\nimport { QUEUE } from './QUEUE_class';\r\nimport './queue.css';\r\n\r\nconst Queue = () => {\r\n  let location = useLocation();\r\n\r\n  const [queueData, setQueueData] = useState([]);\r\n  const [queueSize, setQueueSize] = useState(0);\r\n  const [isMaxSize, setIsMaxSize] = useState(false);\r\n  const [inputData, setInputData] = useState('');\r\n\r\n  useEffect(() => { // clear queue when a user changes route\r\n    QUEUE.clear();\r\n    handleSetQueueData();\r\n  }, [location]);\r\n\r\n  useEffect(() => {\r\n    if (queueSize >= 10) {\r\n      setIsMaxSize(true);\r\n    }\r\n    else {\r\n      setIsMaxSize(false);\r\n    }\r\n  }, [queueSize]);\r\n\r\n  const handleChangeInputData = (e) => {\r\n    setInputData(e.target.value);\r\n  }\r\n\r\n  const handleSetQueueData = () => {\r\n    setQueueData(QUEUE.getAllNodesForRender());\r\n    setQueueSize(QUEUE.getSize());\r\n    setInputData('');\r\n  }\r\n\r\n  const handleEnqueueData = () => {\r\n    if (inputData.trim() === '') {\r\n      return alert('Please input valid data.');\r\n    }\r\n    QUEUE.enqueue(inputData);\r\n    handleSetQueueData();\r\n  }\r\n\r\n  const handleDequeueData = () => {\r\n    if (queueSize === 0) {\r\n      return alert(\"The queue is empty.\");\r\n    }\r\n    QUEUE.dequeue();\r\n    handleSetQueueData();\r\n  }\r\n\r\n  const handleClearQueue = () => {\r\n    if (queueSize === 0) {\r\n      return alert(\"The queue is empty.\");\r\n    }\r\n    if (window.confirm('Would you like to clear the queue?')) {\r\n      QUEUE.clear();\r\n      handleSetQueueData();\r\n    }\r\n  }\r\n\r\n  const maxSizeColor = () => {\r\n    if (isMaxSize) {\r\n      return { color: 'red' };\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ReturnToHome />\r\n      <div className=\"queue-container\">\r\n        <h1 className=\"queue-header\">Queue</h1>\r\n        <div className=\"queue-actions\">\r\n          <div className=\"queue-size\">\r\n            Size: <span style={maxSizeColor()}>{queueSize}</span> / 10\r\n          </div>\r\n          <div className=\"queue-input\">\r\n            <label className=\"queue-input-label\">\r\n              Data:\r\n              <input\r\n                className=\"queue-input-field\"\r\n                type=\"text\"\r\n                value={inputData}\r\n                onChange={handleChangeInputData}\r\n              />\r\n            </label>\r\n          </div>\r\n          <div className=\"queue-buttons\">\r\n            <button\r\n              className=\"btn btn-queue-push\"\r\n              type=\"button\"\r\n              onClick={handleEnqueueData}\r\n              disabled={isMaxSize}\r\n            >\r\n              ENQUEUE\r\n            </button>\r\n            <button\r\n              className=\"btn btn-queue-pop\"\r\n              type=\"button\"\r\n              onClick={handleDequeueData}\r\n            >\r\n              DEQUEUE\r\n            </button>\r\n            <button\r\n              className=\"btn btn-queue-clear\"\r\n              type=\"button\"\r\n              onClick={handleClearQueue}\r\n            >\r\n              CLEAR\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"queue-items\">\r\n          <QueueCanvas queueItems={queueData} />\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Queue;\r\n","import React, { useEffect, useRef } from 'react'\r\n\r\nconst DequeCanvas = ({ dequeItems }) => {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const canvasWidth = canvas.offsetWidth;\r\n    const canvasHeight = canvas.offsetHeight;\r\n    canvas.style.width = '100%';\r\n    canvas.style.height = '100%';\r\n    canvas.width = canvasWidth;\r\n    canvas.height = canvasHeight;\r\n\r\n    draw(ctx, canvasWidth, canvasHeight);\r\n  }, [dequeItems]);\r\n\r\n  const draw = (ctx, canvasWidth, canvasHeight) => {\r\n    let startingPointX;\r\n    let startingPointY;\r\n    let containerWidth;\r\n    let containerHeight;\r\n    let fontSize = 16;\r\n\r\n    if (canvasWidth >= 1408) { // 1440px wide of display\r\n      startingPointX = canvasWidth * 0.1;\r\n      startingPointY = canvasHeight * 0.1;\r\n      containerWidth = canvasWidth * 0.8;\r\n      containerHeight = canvasHeight * 0.5;\r\n    }\r\n    else if (canvasWidth >= 992) { // 1024px wide of display\r\n      startingPointX = canvasWidth * 0.08;\r\n      startingPointY = canvasHeight * 0.1;\r\n      containerWidth = canvasWidth * 0.84;\r\n      containerHeight = canvasHeight * 0.5;\r\n    }\r\n    else if (canvasWidth >= 736) { // 768px wide of display\r\n      startingPointX = canvasWidth * 0.06;\r\n      startingPointY = canvasHeight * 0.1;\r\n      containerWidth = canvasWidth * 0.88;\r\n      containerHeight = canvasHeight * 0.5;\r\n    }\r\n    else if (canvasWidth >= 393) { // 425px wide of display\r\n      startingPointX = canvasWidth * 0.03;\r\n      startingPointY = canvasHeight * 0.1;\r\n      containerWidth = canvasWidth * 0.94;\r\n      containerHeight = canvasHeight * 0.5;\r\n    }\r\n    else { // narrower than 425px wide\r\n      startingPointX = canvasWidth * 0.02;\r\n      startingPointY = canvasHeight * 0.1;\r\n      containerWidth = canvasWidth * 0.96;\r\n      containerHeight = canvasHeight * 0.5;\r\n    }\r\n\r\n    const queueSize = dequeItems.length - 1;\r\n\r\n    dequeItems.forEach((dequeData, i) => {\r\n      ctx.textAlign = 'start';\r\n      ctx.font = `normal ${fontSize}px sans-serif`;\r\n\r\n      // each queue item's size property\r\n      const dequeItemGap = containerWidth * 0.01;\r\n      const dequeItemWidth = containerWidth * 0.091;\r\n      const dequeItemHeight = containerHeight * 0.86;\r\n\r\n      // \"staring x, y point of each queue item\"\r\n      const dequeItemStartX = startingPointX + (dequeItemGap + dequeItemWidth) * i;\r\n      const dequeItemStartY = startingPointY + containerHeight * 0.07;\r\n\r\n      const leftForwardArrowX = 30;\r\n      const rightForwardArrowX = startingPointX + containerWidth + 30;\r\n      const forwardArrowY = startingPointY + containerHeight / 3;\r\n      const backwardArrowY = startingPointY + containerHeight / 3 * 2;\r\n\r\n      if (i === 0) { // draw container only if it's first time to render\r\n        if (canvasWidth >= 1408) {\r\n          // forward arrow (->) at the left side\r\n          drawForwardArrow(ctx, leftForwardArrowX, forwardArrowY, leftForwardArrowX + 60, forwardArrowY);\r\n          // forward arrow (->) at the right side\r\n          drawForwardArrow(ctx, rightForwardArrowX, forwardArrowY, rightForwardArrowX + 60, forwardArrowY)\r\n          // backward arrow (<-) at the left side\r\n          drawBackwardArrow(ctx, leftForwardArrowX, backwardArrowY, leftForwardArrowX + 60, backwardArrowY);\r\n          // backward arrow (<-) at the right side\r\n          drawBackwardArrow(ctx, rightForwardArrowX, backwardArrowY, rightForwardArrowX + 60, backwardArrowY);\r\n        }\r\n\r\n        drawDequeContainer(ctx, startingPointX, startingPointY, containerWidth, containerHeight);\r\n        // draw 'front' text above the container\r\n        drawFrontText(ctx, startingPointX, startingPointY - 10, dequeItemWidth);\r\n      }\r\n\r\n      drawDequeItem(ctx, dequeItemWidth, dequeItemHeight, dequeItemStartX, dequeItemStartY);\r\n\r\n      const printX = startingPointX + dequeItemWidth * 0.07 + (dequeItemGap + dequeItemWidth) * i;\r\n      const printY = startingPointY + containerHeight * 0.15;\r\n      const maxWidthOfData = dequeItemWidth * 0.9;  // maximum width of data inside of each nodes\r\n\r\n      printData(ctx, dequeData, printX, printY, 18, maxWidthOfData);\r\n\r\n      if (i === queueSize) {\r\n        // draw 'back' text below the container\r\n        drawBackText(ctx, startingPointX, startingPointY, dequeItemWidth, dequeItemGap, containerHeight, i);\r\n      }\r\n    });\r\n  }\r\n\r\n  const drawDequeContainer = (ctx, startX, startY, containerWidth, containerHeight) => {\r\n    ctx.lineWidth = 7;\r\n    // upper side of the queue container\r\n    ctx.beginPath();\r\n    ctx.moveTo(startX, startY);\r\n    ctx.lineTo(startX + containerWidth, startY);\r\n\r\n    // bottom side of the queue container\r\n    ctx.moveTo(startX, startY + containerHeight);\r\n    ctx.lineTo(startX + containerWidth, startY + containerHeight);\r\n\r\n    ctx.stroke();\r\n  }\r\n\r\n  const drawDequeItem = (ctx, dequeItemWidth, dequeItemHeight, dequeItemStartX, dequeItemStartY) => {\r\n    ctx.fillStyle = \"#F18677\";\r\n    ctx.fillRect(dequeItemStartX, dequeItemStartY, dequeItemWidth, dequeItemHeight);\r\n  }\r\n\r\n  function printData(context, text, x, y, lineHeight, fitWidth = 0, lineNum = 0) {\r\n    context.fillStyle = \"#000\";\r\n\r\n    // if text's width is 0, no need to wrap data\r\n    if (fitWidth <= 0) {\r\n      context.fillText(text, x, y);\r\n      return;\r\n    }\r\n\r\n    // divide data until the substring's width is longer than the specified width\r\n    for (let i = 1; i <= text.length; i++) {\r\n      let str = text.substr(0, i);\r\n      if (context.measureText(str).width > fitWidth) {\r\n        if (lineNum < 15) { // truncate data from line number 15\r\n          context.fillText(text.substr(0, i - 1), x, y);\r\n        }\r\n        else {\r\n          context.fillText('', x, y);\r\n        }\r\n        printData(context, text.substr(i - 1), x, y + lineHeight, lineHeight, fitWidth, lineNum + 1);\r\n        return;\r\n      }\r\n    }\r\n    if (lineNum < 15) { // truncate data from line number 15\r\n      context.fillText(text, x, y);\r\n    }\r\n    else {\r\n      context.fillText('', x, y);\r\n    }\r\n  }\r\n\r\n  const drawFrontText = (ctx, startX, startY, itemWidth) => {\r\n    ctx.fillStyle = 'red';\r\n\r\n    const frontTextWidth = ctx.measureText('front').width;\r\n    const frontX = startX + (itemWidth - frontTextWidth) / 2;\r\n    const frontY = startY;\r\n    ctx.fillText('Front', frontX, frontY);\r\n  }\r\n\r\n  const drawBackText = (ctx, startX, startY, itemWidth, itemGap, containerHeight, index) => {\r\n    ctx.fillStyle = 'red';\r\n\r\n    const rearTextWidth = ctx.measureText('Back').width;\r\n    const rearX = startX + (itemWidth - rearTextWidth) / 2 + (itemGap + itemWidth) * index;\r\n    const rearY = startY + containerHeight + 20;\r\n\r\n    ctx.fillText('Back', rearX, rearY);\r\n  }\r\n\r\n  const drawForwardArrow = (ctx, fromX, fromY, toX, toY) => {\r\n    ctx.beginPath();\r\n    let headlen = 9; // length of head in pixels\r\n    let dx = toX - fromX;\r\n    let dy = toY - fromY;\r\n    let angle = Math.atan2(dy, dx);\r\n    ctx.strokeStyle = \"#000\";\r\n    ctx.moveTo(fromX, fromY);\r\n    ctx.lineTo(toX, toY);\r\n    ctx.lineTo(toX - headlen * Math.cos(angle - Math.PI / 6), toY - headlen * Math.sin(angle - Math.PI / 6));\r\n    ctx.moveTo(toX, toY);\r\n    ctx.lineTo(toX - headlen * Math.cos(angle + Math.PI / 6), toY - headlen * Math.sin(angle + Math.PI / 6));\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n  }\r\n\r\n  const drawBackwardArrow = (ctx, fromX, fromY, toX, toY) => {\r\n    ctx.beginPath();\r\n    let headlen = 9; // length of head in pixels\r\n    let dx = fromX - toX;\r\n    let dy = fromY - toY;\r\n    let angle = Math.atan2(dy, dx);\r\n    ctx.strokeStyle = \"#000\";\r\n    ctx.moveTo(toX, toY);\r\n    ctx.lineTo(fromX, fromY);\r\n    ctx.lineTo(fromX - headlen * Math.cos(angle - Math.PI / 6), fromY - headlen * Math.sin(angle - Math.PI / 6));\r\n    ctx.moveTo(fromX, fromY);\r\n    ctx.lineTo(fromX - headlen * Math.cos(angle + Math.PI / 6), fromY - headlen * Math.sin(angle + Math.PI / 6));\r\n    ctx.stroke();\r\n  }\r\n\r\n  return (\r\n    <canvas ref={canvasRef}></canvas>\r\n  )\r\n}\r\n\r\nexport default DequeCanvas;\r\n","class Node {\r\n  constructor(_data = null, _prev = null, _next = null) {\r\n    this.next = _next;\r\n    this.prev = _prev;\r\n    this.data = _data;\r\n  }\r\n}\r\n\r\nclass Deque {\r\n  constructor() {\r\n    this.front = null;\r\n    this.back = null;\r\n    this.size = 0;\r\n  }\r\n\r\n  print() {\r\n    let cur = this.front;\r\n    while (cur) {\r\n      console.log(cur.data);\r\n      cur = cur.next;\r\n    }\r\n  }\r\n\r\n  insertFront(value) {\r\n    if (this.size === 0) {\r\n      this.front = this.back = new Node(value);\r\n    }\r\n    else {\r\n      const newNode = new Node(value);\r\n      newNode.next = this.front;\r\n      this.front.prev = newNode;\r\n      this.front = newNode;\r\n    }\r\n    this.size++;\r\n  }\r\n\r\n  insertBack(value) {\r\n    if (this.size === 0) {\r\n      this.front = this.back = new Node(value);\r\n    }\r\n    else {\r\n      const newNode = new Node(value);\r\n      newNode.prev = this.back;\r\n      this.back.next = newNode;\r\n      this.back = newNode;\r\n    }\r\n    this.size++;\r\n  }\r\n\r\n  removeFront() {\r\n    if (this.size === 0) {\r\n      console.log('The Deque is empty. Cannot removeFront().');\r\n      return -1;\r\n    }\r\n    else if (this.size === 1) {\r\n      this.front = this.back = null;\r\n    }\r\n    else {\r\n      this.front = this.front.next;\r\n      this.front.prev = null;\r\n    }\r\n    this.size--;\r\n  }\r\n\r\n  removeBack() {\r\n    if (this.size === 0) {\r\n      console.log('The Deque is empty. Cannot removeBack().');\r\n      return -1;\r\n    }\r\n    else if (this.size === 1) {\r\n      this.front = this.back = null;\r\n    }\r\n    else {\r\n      this.back = this.back.prev;\r\n      this.back.next = null;\r\n    }\r\n    this.size--;\r\n  }\r\n\r\n  getSize() {\r\n    return this.size;\r\n  }\r\n\r\n  clear() {\r\n    if (this.size === 0) {\r\n      console.log('The Deque is empty. Cannot clear().');\r\n      return -1;\r\n    }\r\n    this.front = this.back = null;\r\n    this.size = 0;\r\n  }\r\n\r\n  getAllNodesForRender() {\r\n    const nodes = [];\r\n    let currentNode = this.front;\r\n\r\n    while (currentNode) {\r\n      nodes.push(currentNode.data);\r\n      currentNode = currentNode.next;\r\n    }\r\n    return nodes;\r\n  }\r\n}\r\n\r\nexport const DEQUE = new Deque();","import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nimport ReturnToHome from '../ReturnToHome';\r\nimport DequeCanvas from './DequeCanvas';\r\nimport { DEQUE } from './DEQUE-class';\r\nimport './deque.css';\r\n\r\nconst Deque = () => {\r\n  let location = useLocation();\r\n\r\n  const [dequeData, setDequeData] = useState([]);\r\n  const [DequeSize, setDequeSize] = useState(0);\r\n  const [isMaxSize, setIsMaxSize] = useState(false);\r\n  const [inputData, setInputData] = useState('');\r\n\r\n  useEffect(() => { // clear queue when a user changes route\r\n    DEQUE.clear();\r\n    handleSetDequeData();\r\n  }, [location]);\r\n\r\n  useEffect(() => {\r\n    if (DequeSize >= 10) {\r\n      setIsMaxSize(true);\r\n    }\r\n    else {\r\n      setIsMaxSize(false);\r\n    }\r\n  }, [DequeSize]);\r\n\r\n  const handleChangeInputData = (e) => {\r\n    setInputData(e.target.value);\r\n  }\r\n\r\n  const handleSetDequeData = () => {\r\n    setDequeData(DEQUE.getAllNodesForRender());\r\n    setDequeSize(DEQUE.getSize());\r\n    setInputData('');\r\n  }\r\n\r\n  const handleInsertFrontData = () => {\r\n    if (inputData.trim() === '') {\r\n      return alert('Please input valid data.');\r\n    }\r\n    DEQUE.insertFront(inputData);\r\n    handleSetDequeData();\r\n  }\r\n\r\n  const handleInsertBackData = () => {\r\n    if (inputData.trim() === '') {\r\n      return alert('Please input valid data.');\r\n    }\r\n    DEQUE.insertBack(inputData);\r\n    handleSetDequeData();\r\n  }\r\n\r\n  const handleRemoveFrontData = () => {\r\n    if (DequeSize === 0) {\r\n      return alert(\"The queue is empty.\");\r\n    }\r\n    DEQUE.removeFront();\r\n    handleSetDequeData();\r\n  }\r\n\r\n  const handleRemoveBackData = () => {\r\n    if (DequeSize === 0) {\r\n      return alert(\"The queue is empty.\");\r\n    }\r\n    DEQUE.removeBack();\r\n    handleSetDequeData();\r\n  }\r\n\r\n  const handleClearDeque = () => {\r\n    if (DequeSize === 0) {\r\n      return alert(\"The queue is empty.\");\r\n    }\r\n    if (window.confirm('Would you like to clear the queue?')) {\r\n      DEQUE.clear();\r\n      handleSetDequeData();\r\n    }\r\n  }\r\n\r\n  const maxSizeColor = () => {\r\n    if (isMaxSize) {\r\n      return { color: 'red' };\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ReturnToHome />\r\n      <div className=\"deque-container\">\r\n        <h1 className=\"deque-header\">Deque</h1>\r\n        <div className=\"deque-actions\">\r\n          <div className=\"deque-size\">\r\n            Size: <span style={maxSizeColor()}>{DequeSize}</span> / 10\r\n          </div>\r\n          <div className=\"deque-input\">\r\n            <label className=\"deque-input-label\">\r\n              Data:\r\n              <input\r\n                className=\"deque-input-field\"\r\n                type=\"text\"\r\n                value={inputData}\r\n                onChange={handleChangeInputData}\r\n              />\r\n            </label>\r\n          </div>\r\n          <div className=\"deque-buttons\">\r\n            <button\r\n              className=\"btn btn-deque-insert-front\"\r\n              type=\"button\"\r\n              onClick={handleInsertFrontData}\r\n              disabled={isMaxSize}\r\n            >\r\n              INSERT FRONT\r\n            </button>\r\n            <button\r\n              className=\"btn btn-deque-insert-back\"\r\n              type=\"button\"\r\n              onClick={handleInsertBackData}\r\n              disabled={isMaxSize}\r\n            >\r\n              INSERT BACK\r\n            </button>\r\n            <button\r\n              className=\"btn btn-deque-remove-front\"\r\n              type=\"button\"\r\n              onClick={handleRemoveFrontData}\r\n            >\r\n              REMOVE FRONT\r\n            </button>\r\n            <button\r\n              className=\"btn btn-deque-remove-back\"\r\n              type=\"button\"\r\n              onClick={handleRemoveBackData}\r\n            >\r\n              REMOVE BACK\r\n            </button>\r\n            <button\r\n              className=\"btn btn-deque-clear\"\r\n              type=\"button\"\r\n              onClick={handleClearDeque}\r\n            >\r\n              CLEAR\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"deque-items\">\r\n          <DequeCanvas dequeItems={dequeData} />\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Deque;\r\n","import React from 'react';\r\n\r\nconst InfoIcon = ({ onClickFunc }) => {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn-info-icon\"\r\n      onClick={onClickFunc}\r\n    >\r\n      <svg\r\n        aria-hidden=\"true\"\r\n        focusable=\"false\"\r\n        data-prefix=\"fas\"\r\n        data-icon=\"info-circle\"\r\n        className=\"svg-inline--fa fa-info-circle fa-w-16\"\r\n        role=\"img\" xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 512 512\"\r\n      >\r\n        <path\r\n          fill=\"currentColor\"\r\n          d=\"M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z\">\r\n        </path>\r\n      </svg>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default InfoIcon;","import React from 'react';\r\n\r\nconst CloseIcon = ({ onClickFunction }) => {\r\n  return (\r\n    <svg\r\n      aria-hidden=\"true\"\r\n      focusable=\"false\"\r\n      data-prefix=\"fas\"\r\n      data-icon=\"times\"\r\n      className=\"svg-inline--fa fa-times fa-w-11\"\r\n      role=\"img\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      viewBox=\"0 0 352 512\"\r\n      onClick={onClickFunction}\r\n    >\r\n      <path fill=\"currentColor\" d=\"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\">\r\n      </path>\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default CloseIcon;","import React from 'react';\r\n\r\nimport CloseIcon from '../CloseIcon';\r\n\r\nconst BstMethodsInfo = ({ closeInfoFunc }) => {\r\n  return (\r\n    <div className=\"bst-methods-info-bg\">\r\n      <div className=\"bst-methods-info\">\r\n        <div className=\"bst-methods-close\">\r\n          <CloseIcon onClickFunction={closeInfoFunc} />\r\n        </div>\r\n      1234test\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BstMethodsInfo;\r\n","import React, { useEffect, useRef } from 'react';\r\n\r\nconst BstCanvas = ({ bstItems }) => {\r\n  const canvasRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const canvasWidth = canvas.offsetWidth;\r\n    const canvasHeight = canvas.offsetHeight;\r\n    canvas.style.width = '100%';\r\n    canvas.style.height = '100%';\r\n    canvas.width = canvasWidth;\r\n    canvas.height = canvasHeight;\r\n\r\n    bstItems.forEach((bstNode, i) => {\r\n      // maximum number of nodes in the specific depth level\r\n      let maxNumOfNode = 2 ** bstNode.depth;\r\n      let radius\r\n\r\n      if (canvasWidth >= 1408) {\r\n        radius = 30;\r\n      }\r\n      else if (canvasWidth >= 992) {\r\n        radius = 27;\r\n      }\r\n      else if (canvasWidth >= 736) {\r\n        radius = 23;\r\n      }\r\n\r\n      let startingPointX = radius + (canvasWidth - radius * 2 * maxNumOfNode) / 2 ** (bstNode.depth + 1);\r\n      let startingPointY = radius * 2 + 10;\r\n      let depthHeight = radius + 120;\r\n      let nodeGap = 0;\r\n\r\n\r\n      if (i !== 0) { // except root\r\n        nodeGap = (canvasWidth - startingPointX * 2) / (2 ** bstNode.depth - 1);\r\n      }\r\n\r\n      let circleX = startingPointX + nodeGap * bstNode.pos;\r\n      let circleY = startingPointY + depthHeight * bstNode.depth;\r\n\r\n      drawCircle(ctx, circleX, circleY, radius);\r\n      drawText(ctx, bstNode.data, circleX, circleY + 3);\r\n\r\n      if (bstNode.depth !== 0) {\r\n        let lineFromX;\r\n        let lineFromY = circleY - bstNode.depth * 5.8;\r\n        let lineToX;\r\n        let lineToY = circleY - depthHeight + bstNode.depth * 5.8;\r\n        if (bstNode.pos % 2 === 0) {\r\n          lineFromX = circleX + radius - bstNode.depth * 3;\r\n          lineToX = circleX - radius + nodeGap / 2 + bstNode.depth * 5.2;\r\n        }\r\n        else {\r\n          lineFromX = circleX - radius + bstNode.depth * 3;\r\n          lineToX = circleX + radius - nodeGap / 2 - bstNode.depth * 5.2;\r\n        }\r\n        drawLine(ctx, lineFromX, lineFromY, lineToX, lineToY);\r\n      }\r\n    });\r\n  }, [bstItems]);\r\n\r\n  const drawCircle = (ctx, circleX, circleY, circleRadius) => {\r\n    ctx.fillStyle = '#0F4D43';\r\n    ctx.beginPath();\r\n    ctx.arc(circleX, circleY, circleRadius, 0, 2 * Math.PI)\r\n    ctx.closePath();\r\n    ctx.fill();\r\n  }\r\n\r\n  const drawText = (ctx, text, textX, textY) => {\r\n    ctx.fillStyle = '#fff';\r\n    ctx.textAlign = 'center';\r\n    ctx.font = `normal 16px sans-serif`;\r\n\r\n    ctx.fillText(text, textX, textY);\r\n  }\r\n\r\n  const drawLine = (ctx, fromX, fromY, toX, toY) => {\r\n    ctx.lineWidth = 2;\r\n    ctx.beginPath();\r\n    ctx.moveTo(fromX, fromY);\r\n    ctx.lineTo(toX, toY);\r\n    ctx.stroke();\r\n  }\r\n\r\n  return (\r\n    <canvas ref={canvasRef}></canvas>\r\n  );\r\n}\r\n\r\nexport default BstCanvas;\r\n","class Node {\r\n  constructor(_data) {\r\n    this.data = _data;\r\n    this.left = null;\r\n    this.right = null;\r\n    this.parent = null;\r\n  }\r\n}\r\n\r\nclass Bst {\r\n  constructor() {\r\n    this.size = 0;\r\n    this.root = null;\r\n  }\r\n\r\n  insert(data) {\r\n    const newNode = new Node(data);\r\n\r\n    if (!this.root) {\r\n      this.root = newNode;\r\n      this.size++;\r\n      return true;\r\n    }\r\n    else {\r\n      let currentNode = this.root;\r\n\r\n      while (currentNode) {\r\n        if (currentNode.data > data) {\r\n          if (!currentNode.left) {\r\n            currentNode.left = newNode;\r\n            newNode.parent = currentNode;\r\n            this.size++;\r\n            return true;\r\n          }\r\n          else {\r\n            currentNode = currentNode.left;\r\n          }\r\n        }\r\n        else if (currentNode.data < data) {\r\n          if (!currentNode.right) {\r\n            currentNode.right = newNode;\r\n            newNode.parent = currentNode;\r\n            this.size++\r\n            return true;\r\n          }\r\n          else {\r\n            currentNode = currentNode.right;\r\n          }\r\n        }\r\n        // if inserting data is already exists in the tree,\r\n        // set 'currentNode' to null to exit the loop\r\n        else {\r\n          currentNode = null;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  remove(removeData) {\r\n    if (this.size === 0) {\r\n      console.log('The tree is empty. Cannot remove().');\r\n      return false;\r\n    }\r\n\r\n    let currentNode = this.root;\r\n\r\n    // search through the tree to see whether the remove data is exist\r\n    while (currentNode && currentNode.data !== removeData) {\r\n      currentNode = (currentNode.data > removeData) ? currentNode.left : currentNode.right;\r\n    }\r\n\r\n    // if the remove data doesn't exist in the tree\r\n    if (!currentNode) {\r\n      console.log('The remove data does not exist. Cannot remove().');\r\n      return false;\r\n    }\r\n\r\n    // if the node to be deleted is a leaf node\r\n    if (this.isLeaf(currentNode)) {\r\n      if (currentNode === this.root) {\r\n        this.root = null;\r\n        this.size--;\r\n        return true;\r\n      }\r\n\r\n      if (currentNode.parent.left === currentNode) {\r\n        currentNode.parent.left = null;\r\n      }\r\n      else {\r\n        currentNode.parent.right = null;\r\n      }\r\n      this.size--;\r\n      return true;\r\n    }\r\n    // if the node to be deleted has only left child\r\n    else if (currentNode.left && !currentNode.right) {\r\n      // if the node to be deleted is a root,\r\n      // make its left child a root\r\n      if (currentNode === this.root) {\r\n        this.root = currentNode.left;\r\n      }\r\n      else if (currentNode.parent.left === currentNode) {\r\n        currentNode.parent.left = currentNode.left;\r\n      }\r\n      else {\r\n        currentNode.parent.right = currentNode.left;\r\n      }\r\n\r\n      this.size--;\r\n      return true;\r\n    }\r\n    // if the node to be deleted has only right child\r\n    else if (!currentNode.left && currentNode.right) {\r\n      // if the node to be deleted is a root,\r\n      // make its right child a root\r\n      if (currentNode === this.root) {\r\n        this.root = currentNode.right;\r\n      }\r\n      else if (currentNode.parent.left === currentNode) {\r\n        currentNode.parent.left = currentNode.right;\r\n      }\r\n      else {\r\n        currentNode.parent.right = currentNode.right;\r\n      }\r\n\r\n      this.size--;\r\n      return true;\r\n    }\r\n    // if the node to be deleted has two children\r\n    else {\r\n      // find the smallest data node in the right subtree of the current node,\r\n      // and make the smallest data node a successor\r\n      let successorNode = currentNode.right;\r\n\r\n      while (successorNode.left) {\r\n        successorNode = successorNode.left;\r\n      }\r\n\r\n      currentNode.data = successorNode.data;\r\n\r\n      // if the smallest data node has a right subtree,\r\n      // make the right subtree a (left or right) child of the smallest's parent\r\n      // depending on the successor's position\r\n      if (successorNode.right) {\r\n        if (successorNode.parent.left === successorNode) {\r\n          successorNode.parent.left = successorNode.right;\r\n        }\r\n        else {\r\n          successorNode.parent.right = successorNode.right;\r\n        }\r\n      }\r\n      else {\r\n        if (successorNode.parent.left === successorNode) {\r\n          successorNode.parent.left = null;\r\n        }\r\n        else {\r\n          successorNode.parent.right = null;\r\n        }\r\n      }\r\n\r\n      this.size--;\r\n      return true;\r\n    }\r\n  }\r\n\r\n  search(searchData) {\r\n    if (this.size === 0) {\r\n      return console.log('The tree is empty. Cannot search().');\r\n    }\r\n\r\n    let currentNode = this.root;\r\n\r\n    while (currentNode) {\r\n      if (currentNode.data === searchData) {\r\n        return true;\r\n      }\r\n      else if (currentNode.data > searchData) {\r\n        currentNode = currentNode.left;\r\n      }\r\n      else {\r\n        currentNode = currentNode.right;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  isInternal(node) {\r\n    if (!node.left && !node.right) return false;\r\n    else return true;\r\n  }\r\n\r\n  isLeaf(node) {\r\n    if (!node.left && !node.right) return true;\r\n    else return false;\r\n  }\r\n\r\n  getRoot() {\r\n    return this.root;\r\n  }\r\n\r\n  // returns number of nodes in the tree\r\n  getSize() {\r\n    return this.size;\r\n  }\r\n\r\n  // prints each node in pre-order way\r\n  preOrder(treeNode) {\r\n    if (!treeNode) return;\r\n    console.log(treeNode.data);\r\n    this.preOrder(treeNode.left);\r\n    this.preOrder(treeNode.right);\r\n  }\r\n\r\n  // prints each node in in-order way\r\n  inOrder(treeNode) {\r\n    if (!treeNode) return;\r\n    this.inOrder(treeNode.left);\r\n    console.log(treeNode.data);\r\n    this.inOrder(treeNode.right);\r\n  }\r\n\r\n  // prints each node in in-order way\r\n  postOrder(treeNode) {\r\n    if (!treeNode) return;\r\n    this.postOrder(treeNode.left);\r\n    this.postOrder(treeNode.right);\r\n    console.log(treeNode.data);\r\n  }\r\n\r\n  clear() {\r\n    if (this.size === 0) {\r\n      return console.log('The tree is empty. Cannot clear().');\r\n    }\r\n\r\n    this.size = 0;\r\n    this.root = null;\r\n  }\r\n\r\n  getMaxDepth(node) {\r\n    if (!node) return 0;\r\n\r\n    let leftDepth = this.getMaxDepth(node.left);\r\n    let rightDepth = this.getMaxDepth(node.right);\r\n\r\n    if (node === this.root) {\r\n      if (leftDepth > rightDepth) return leftDepth;\r\n      else return rightDepth;\r\n    }\r\n    else {\r\n      if (leftDepth > rightDepth) return leftDepth + 1;\r\n      else return rightDepth + 1;\r\n    }\r\n  }\r\n\r\n  getAllNodesForRender(node, dataArr, depth = 0, pos = 0) {\r\n    if (!node) return;\r\n    /* pos (position):\r\n     *    \r\n     *          n\r\n     *      2n    2n+1\r\n     * \r\n     */\r\n    dataArr.push({ data: node.data, depth, pos });\r\n    this.getAllNodesForRender(node.left, dataArr, depth + 1, 2 * pos);\r\n    this.getAllNodesForRender(node.right, dataArr, depth + 1, 2 * pos + 1);\r\n  }\r\n}\r\n\r\n// const BST = new Bst();\r\nexport const BST = new Bst();\r\n\r\n// BST.insert(10);\r\n// BST.insert(4);\r\n// BST.insert(16);\r\n// BST.insert(13);\r\n// BST.insert(30);\r\n// BST.insert(20);\r\n// BST.insert(42);\r\n// BST.insert(25);\r\n// BST.insert(22);\r\n// BST.insert(28);\r\n\r\n\r\n// BST.preOrder(root);\r\n// BST.inOrder(root);\r\n// BST.postOrder(root);\r\n\r\n\r\n// BST.remove(16);\r\n\r\n// const root = BST.getRoot();\r\n// BST.inOrder(root);\r\n\r\n// BST.insert(1);\r\n// BST.insert(2);\r\n// BST.insert(3);\r\n\r\n// BST.remove(1);\r\n\r\n// BST.inOrder(BST.getRoot());","import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nimport ReturnToHome from '../ReturnToHome';\r\nimport InfoIcon from '../InfoIcon';\r\nimport BstMethodsInfo from './BstMethodsInfo';\r\nimport BstCanvas from './BstCanvas';\r\nimport { BST } from './BST_class';\r\nimport './bst.css';\r\n\r\nconst Bst = () => {\r\n  let location = useLocation();\r\n\r\n  const [bstData, setBstData] = useState([]);\r\n  const [bstSize, setBstSize] = useState(0);\r\n  const [bstDepth, setBstDepth] = useState(0);\r\n  const [isMaxSize, setIsMaxSize] = useState(false);\r\n  const [isMaxDepth, setIsMaxDepth] = useState(false);\r\n  const [inputData, setInputData] = useState('');\r\n  const [isInfoOpen, setIsInfoOpen] = useState(false);\r\n\r\n  useEffect(() => { // clear tree when a user changes route\r\n    BST.clear();\r\n    handleSetBstData();\r\n  }, [location]);\r\n\r\n  useEffect(() => {\r\n    if (bstSize >= 31) {\r\n      setIsMaxSize(true);\r\n    }\r\n    else {\r\n      setIsMaxSize(false);\r\n    }\r\n  }, [bstSize]);\r\n\r\n  useEffect(() => {\r\n    if (bstDepth >= 4) {\r\n      setIsMaxDepth(true);\r\n    }\r\n    else {\r\n      setIsMaxDepth(false);\r\n    }\r\n  }, [bstDepth]);\r\n\r\n  const handleChangeInputData = (e) => {\r\n    setInputData(e.target.value);\r\n  }\r\n\r\n  const handleSetBstData = () => {\r\n    const dataArray = [];\r\n    BST.getAllNodesForRender(BST.getRoot(), dataArray);\r\n    setBstData(dataArray.sort(sortByData).sort(sortByDepth));\r\n    setBstSize(BST.getSize());\r\n    setBstDepth(BST.getMaxDepth(BST.getRoot()));\r\n    setInputData('');\r\n  }\r\n\r\n  const handleInsertData = () => {\r\n    if (inputData.trim() === '') {\r\n      return alert('Please input valid data.');\r\n    }\r\n    if (isMaxDepth && !isMaxSize) {\r\n      // test if the max depth after inserting a new data is greater\r\n      // than depth limit\r\n      BST.insert(parseInt(inputData));\r\n      const maxDepth = BST.getMaxDepth(BST.getRoot());\r\n      BST.remove(parseInt(inputData));\r\n\r\n      if (maxDepth > 4) {\r\n        return alert('Out of the maximum depth. Please try another data.');\r\n      }\r\n      else {\r\n        BST.insert(parseInt(inputData));\r\n        handleSetBstData();\r\n        return;\r\n      }\r\n    }\r\n    BST.insert(parseInt(inputData));\r\n    handleSetBstData();\r\n  }\r\n\r\n  const handleRemoveData = () => {\r\n    if (bstSize === 0) {\r\n      return alert(\"The tree is empty.\");\r\n    }\r\n    if (inputData.trim() === '') {\r\n      return alert('Please input valid data.');\r\n    }\r\n    BST.remove(parseInt(inputData));\r\n    handleSetBstData();\r\n  }\r\n\r\n  const handleClearBst = () => {\r\n    if (bstSize === 0) {\r\n      return alert(\"The tree is empty.\");\r\n    }\r\n    if (window.confirm('Would you like to clear the tree?')) {\r\n      BST.clear();\r\n      handleSetBstData();\r\n    }\r\n  }\r\n\r\n  const colorMaxSize = () => {\r\n    if (isMaxSize) {\r\n      return { color: 'red' };\r\n    }\r\n  }\r\n\r\n  const colorMaxDepth = () => {\r\n    if (isMaxDepth) {\r\n      return { color: 'red' };\r\n    }\r\n  }\r\n\r\n  const openBstMethodsInfo = (e) => {\r\n    e.preventDefault();\r\n    setIsInfoOpen(true);\r\n    document.addEventListener('click', closeBstMethodsInfo);\r\n  }\r\n\r\n  const closeBstMethodsInfo = () => {\r\n    setIsInfoOpen(false);\r\n    document.removeEventListener('click', closeBstMethodsInfo);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ReturnToHome />\r\n      <InfoIcon\r\n        onClickFunc={openBstMethodsInfo}\r\n      />\r\n      {isInfoOpen && <BstMethodsInfo closeInfoFunc={closeBstMethodsInfo} />}\r\n      <div className=\"bst-container\">\r\n        <h1 className=\"bst-header\">Binary Search Tree</h1>\r\n        <div className=\"bst-actions\">\r\n          <div className=\"bst-size\">\r\n            Size: <span style={colorMaxSize()}>{bstSize}</span> / 31\r\n          </div>\r\n          <div className=\"bst-size\">\r\n            Depth: <span style={colorMaxDepth()}>{bstDepth}</span> / 4\r\n          </div>\r\n          <div className=\"bst-input\">\r\n            <label className=\"bst-input-label\">\r\n              Data:\r\n              <input\r\n                className=\"bst-input-field\"\r\n                type=\"text\"\r\n                value={inputData}\r\n                onChange={handleChangeInputData}\r\n              />\r\n            </label>\r\n          </div>\r\n          <div className=\"bst-buttons\">\r\n            <button\r\n              className=\"btn btn-bst-insert\"\r\n              type=\"button\"\r\n              onClick={handleInsertData}\r\n              disabled={isMaxSize}\r\n            >\r\n              INSERT\r\n            </button>\r\n            <button\r\n              className=\"btn btn-bst-remove\"\r\n              type=\"button\"\r\n              onClick={handleRemoveData}\r\n            >\r\n              REMOVE\r\n            </button>\r\n            <button\r\n              className=\"btn btn-bst-clear\"\r\n              type=\"button\"\r\n              onClick={handleClearBst}\r\n            >\r\n              CLEAR\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"bst-items\">\r\n          <BstCanvas bstItems={bstData} />\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Bst;\r\n\r\n\r\nfunction sortByData(a, b) {\r\n  return a['data'] - b['data'];\r\n}\r\n\r\nfunction sortByDepth(a, b) {\r\n  return a['depth'] - b['depth'];\r\n}","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nimport Main from './components/Main';\r\nimport SinglyLinkedList from './components/singlyLinkedList/SinglyLinkedList';\r\nimport DoublyLinkedList from './components/doublyLinkedList/DoublyLinkedList';\r\nimport Stack from './components/stack/Stack';\r\nimport Queue from './components/queue/Queue';\r\nimport Deque from './components/deque/Deque';\r\nimport Bst from './components/binarySearchTree/Bst';\r\nimport './app.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router basename=\"/dsvisualizer\">\r\n      <Switch>\r\n        <Route path=\"/\" component={Main} exact={true} />\r\n        <Route path=\"/sll\" component={SinglyLinkedList} exact={true} />\r\n        <Route path=\"/dll\" component={DoublyLinkedList} exact={true} />\r\n        <Route path=\"/stack\" component={Stack} exact={true} />\r\n        <Route path=\"/queue\" component={Queue} exact={true} />\r\n        <Route path=\"/deque\" component={Deque} exact={true} />\r\n        <Route path=\"/bst\" component={Bst} exact={true} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}