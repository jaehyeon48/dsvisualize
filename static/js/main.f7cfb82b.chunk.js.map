{"version":3,"sources":["components/Main.js","components/doublyLinkedList/DLL_class.js","components/doublyLinkedList/DoublyLinkedList.js","App.js","index.js"],"names":["Main","history","useHistory","className","onClick","push","Node","_data","_prev","_next","this","prev","next","data","id","uuidv4","DLL","newNode","head","tail","length","console","log","insertIndex","unshift","append","oneBeforeInsertNode","i","removeIndex","pop","oneBeforeRemoveNode","value","currentNode","index","nodes","DoublyLinkedList","useState","nodeData","setNodeData","inputData","setInputData","inputIndex","setInputIndex","type","onChange","e","target","trim","alert","getAllNodesForRender","shift","window","confirm","clear","map","node","key","App","path","component","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQA2DeA,G,MAtDF,WACX,IAAIC,EAAUC,cAsBd,OACE,yBAAKC,UAAU,aACb,wBAAIA,UAAU,oBAAd,8BAGA,yBAAKA,UAAU,0BACb,yBACEA,UAAU,2BACVC,QA5Bc,WACpBH,EAAQI,KAAK,UAyBT,sBAIA,yBACEF,UAAU,2BACVC,QA5Bc,WACpBH,EAAQI,KAAK,UAyBT,sBAIA,yBACEF,UAAU,6BACVC,QA5BgB,WACtBH,EAAQI,KAAK,YAyBT,SAIA,yBACEF,UAAU,6BACVC,QA5BgB,WACtBH,EAAQI,KAAK,YAyBT,SAIA,yBACEF,UAAU,2BACVC,QA5Bc,WACpBH,EAAQI,KAAK,UAyBT,0B,+BChDFC,EACJ,aAAuD,IAA3CC,EAA0C,uDAAlC,KAAMC,EAA4B,uDAApB,KAAMC,EAAc,uDAAN,KAAM,oBACpDC,KAAKC,KAAOH,EACZE,KAAKE,KAAOH,EACZC,KAAKG,KAAON,EACZG,KAAKI,GAAKC,eA0KDC,EAAM,I,WArKjB,aAA0B,IAAdH,EAAa,uDAAN,KAAM,oBACvB,IAAMI,EAAU,IAAIX,EAAKO,GACzBH,KAAKQ,KAAOD,EACZP,KAAKS,KAAOF,EACZP,KAAKU,OAAS,E,mDAITP,GACL,IAAMI,EAAU,IAAIX,EAAKO,GACL,IAAhBH,KAAKU,OACPV,KAAKQ,KAAOR,KAAKS,KAAOF,GAGxBA,EAAQN,KAAOD,KAAKS,KACpBT,KAAKS,KAAKP,KAAOK,EACjBP,KAAKS,KAAOF,GAEdP,KAAKU,W,4BAKe,IAAhBV,KAAKU,QAIgB,IAAhBV,KAAKU,OACZV,KAAKQ,KAAOR,KAAKS,KAAO,MAGxBT,KAAKS,KAAKR,KAAKC,KAAO,KACtBF,KAAKS,KAAOT,KAAKS,KAAKR,MAExBD,KAAKU,UAVHC,QAAQC,IAAI,sC,8BAcRT,GACN,IAAMI,EAAU,IAAIX,EAAKO,GACL,IAAhBH,KAAKU,OACPV,KAAKQ,KAAOR,KAAKS,KAAOF,GAGxBA,EAAQL,KAAOF,KAAKQ,KACpBR,KAAKQ,KAAKP,KAAOM,EACjBP,KAAKQ,KAAOD,GAEdP,KAAKU,W,8BAKe,IAAhBV,KAAKU,QAIgB,IAAhBV,KAAKU,OACZV,KAAKQ,KAAOR,KAAKS,KAAO,MAGxBT,KAAKQ,KAAKN,KAAKD,KAAO,KACtBD,KAAKQ,KAAOR,KAAKQ,KAAKN,MAExBF,KAAKU,UAVHC,QAAQC,IAAI,wC,+BAcPC,EAAaV,GACpB,GAAIU,EAAc,GAAKA,EAAcb,KAAKU,OACxCC,QAAQC,IAAI,mCADd,CAIK,GAAoB,IAAhBC,EACP,OAAOb,KAAKc,QAAQX,GAEjB,GAAIU,IAAgBb,KAAKU,OAC5B,OAAOV,KAAKe,OAAOZ,GAKnB,IAFA,IAAMI,EAAU,IAAIX,EAAKO,GACrBa,EAAsBhB,KAAKQ,KACtBS,EAAI,EAAGA,EAAIJ,EAAc,EAAGI,IACnCD,EAAsBA,EAAoBd,KAE5CK,EAAQN,KAAOe,EACfT,EAAQL,KAAOc,EAAoBd,KACnCc,EAAoBd,KAAKD,KAAOM,EAChCS,EAAoBd,KAAOK,EAC3BP,KAAKU,Y,+BAKAQ,GACP,GAAIA,EAAc,GAAKA,GAAelB,KAAKU,OACzCC,QAAQC,IAAI,oCAGT,GAAoB,IAAhBZ,KAAKU,OAAT,CAIA,GAAoB,IAAhBQ,EACP,OAAOlB,KAAKc,UAET,GAAII,IAAgBlB,KAAKU,OAAS,EACrC,OAAOV,KAAKmB,MAIZ,IADA,IAAIC,EAAsBpB,KAAKQ,KACtBS,EAAI,EAAGA,EAAIC,EAAc,EAAGD,IACnCG,EAAsBA,EAAoBlB,KAE5CkB,EAAoBlB,KAAOkB,EAAoBlB,KAAKA,KACpDkB,EAAoBlB,KAAKA,KAAKD,KAAOmB,EACrCpB,KAAKU,cAhBLC,QAAQC,IAAI,2C,6BAqBTS,GAIL,IAHA,IAAIC,EAActB,KAAKQ,KACnBe,EAAQ,EAELD,GAAa,CAClB,GAAIA,EAAYnB,OAASkB,EACvB,OAAOE,EAETD,EAAcA,EAAYpB,KAC1BqB,IAGF,OAAO,O,8BAIPvB,KAAKQ,KAAOR,KAAKS,KAAO,KACxBT,KAAKU,OAAS,I,8BAKd,IADA,IAAIY,EAActB,KAAKQ,KAChBc,GACLX,QAAQC,IAAIU,EAAYnB,MACxBmB,EAAcA,EAAYpB,O,6CAQ5B,IAFA,IAAMsB,EAAQ,GACVF,EAActB,KAAKQ,KAChBc,GACLE,EAAM7B,KAAK,CACTS,GAAIkB,EAAYlB,GAChBD,KAAMmB,EAAYnB,OAEpBmB,EAAcA,EAAYpB,KAG5B,OAAOsB,M,MCjDIC,G,MAvHU,WAAO,IAAD,EACGC,mBAAS,IADZ,mBACtBC,EADsB,KACZC,EADY,OAEKF,mBAAS,IAFd,mBAEtBG,EAFsB,KAEXC,EAFW,OAGOJ,mBAAS,IAHhB,mBAGtBK,EAHsB,KAGVC,EAHU,KAyD7B,OACE,yBAAKvC,UAAU,sBACb,wBAAIA,UAAU,cAAd,sBACA,yBAAKA,UAAU,eACb,yBAAKA,UAAU,aACb,2BAAOA,UAAU,mBAAjB,SAEE,2BACEA,UAAU,kBACVwC,KAAK,OACLZ,MAAOU,EACPG,SA3DmB,SAACC,GAC9BH,EAAcG,EAAEC,OAAOf,WA6DjB,2BAAO5B,UAAU,mBAAjB,QAEE,2BACEA,UAAU,kBACVwC,KAAK,OACLZ,MAAOQ,EACPK,SAxEkB,SAACC,GAC7BL,EAAaK,EAAEC,OAAOf,YA2ElB,yBAAK5B,UAAU,eACb,4BACEA,UAAU,qBACVwC,KAAK,SACLvC,QAxEc,WACtB,GAAyB,KAArBmC,EAAUQ,OACZ,OAAOC,MAAM,4BAEfhC,EAAIS,OAAOc,GACXD,EAAYtB,EAAIiC,wBAChBT,EAAa,MA+DP,UAKA,4BACErC,UAAU,kBACVwC,KAAK,SACLvC,QApEW,WACnB,GAAwB,IAApBiC,EAASjB,OACX,OAAO4B,MAAM,sBAEfhC,EAAIa,MACJS,EAAYtB,EAAIiC,0BA4DV,OAKA,4BACE9C,UAAU,sBACVwC,KAAK,SACLvC,QAjEe,WACvB,GAAyB,KAArBmC,EAAUQ,OACZ,OAAOC,MAAM,2BAEfhC,EAAIQ,QAAQe,GACZD,EAAYtB,EAAIiC,wBAChBT,EAAa,MAwDP,WAKA,4BACErC,UAAU,oBACVwC,KAAK,SACLvC,QA7Da,WACrB,GAAwB,IAApBiC,EAASjB,OACX,OAAO4B,MAAM,sBAEfhC,EAAIkC,QACJZ,EAAYtB,EAAIiC,0BAqDV,SAKA,4BACE9C,UAAU,oBACVwC,KAAK,SACLvC,QA1Da,WACrB,GAAwB,IAApBiC,EAASjB,OACX,OAAO4B,MAAM,sBAEXG,OAAOC,QAAQ,+BACjBpC,EAAIqC,QACJf,EAAYtB,EAAIiC,2BAiDZ,WAOJ,6BACGZ,EAASiB,KAAI,SAAAC,GAAI,OAChB,yBAAKC,IAAKD,EAAKzC,IAAKyC,EAAK1C,a,MClGpB4C,MAXf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,gBAAgBC,UAAW3D,EAAM4D,OAAO,IACpD,kBAAC,IAAD,CAAOF,KAAK,OAAOC,UAAWxB,EAAkByB,OAAO,OCR/DC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.f7cfb82b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport './main.css';\r\n\r\nconst Main = () => {\r\n  let history = useHistory();\r\n\r\n  const redirectToSLL = () => {\r\n    history.push('/sll');\r\n  }\r\n\r\n  const redirectToDLL = () => {\r\n    history.push('/dll');\r\n  }\r\n\r\n  const redirectToStack = () => {\r\n    history.push('/stack');\r\n  }\r\n\r\n  const redirectToQueue = () => {\r\n    history.push('/queue');\r\n  }\r\n\r\n  const redirectToBST = () => {\r\n    history.push('/bst');\r\n  }\r\n\r\n  return (\r\n    <div className=\"main-page\">\r\n      <h1 className=\"main-page-header\">\r\n        Data Structures Visualizer\r\n      </h1>\r\n      <div className=\"select-data-structures\">\r\n        <div\r\n          className=\"data-structures-item sll\"\r\n          onClick={redirectToSLL}\r\n        >Singly Linked List</div>\r\n        <div\r\n          className=\"data-structures-item dll\"\r\n          onClick={redirectToDLL}\r\n        >Doubly Linked List</div>\r\n        <div\r\n          className=\"data-structures-item stack\"\r\n          onClick={redirectToStack}\r\n        >Stack</div>\r\n        <div\r\n          className=\"data-structures-item queue\"\r\n          onClick={redirectToQueue}\r\n        >Queue</div>\r\n        <div\r\n          className=\"data-structures-item bst\"\r\n          onClick={redirectToBST}\r\n        >Binary Search Tree</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import { v4 as uuidv4 } from 'uuid';\r\n\r\nclass Node {\r\n  constructor(_data = null, _prev = null, _next = null) {\r\n    this.prev = _prev;\r\n    this.next = _next;\r\n    this.data = _data;\r\n    this.id = uuidv4();\r\n  }\r\n}\r\n\r\nclass DLinkedList {\r\n  constructor(data = null) {\r\n    const newNode = new Node(data);\r\n    this.head = newNode;\r\n    this.tail = newNode;\r\n    this.length = 1;\r\n  }\r\n\r\n  // add data to the last place of the list\r\n  append(data) {\r\n    const newNode = new Node(data);\r\n    if (this.length === 0) {\r\n      this.head = this.tail = newNode;\r\n    }\r\n    else {\r\n      newNode.prev = this.tail;\r\n      this.tail.next = newNode;\r\n      this.tail = newNode;\r\n    }\r\n    this.length++;\r\n  }\r\n\r\n  // remove data at the last place of the list\r\n  pop() {\r\n    if (this.length === 0) {\r\n      console.log(\"The list is empty. Cannot pop().\");\r\n      return;\r\n    }\r\n    else if (this.length === 1) {\r\n      this.head = this.tail = null;\r\n    }\r\n    else {\r\n      this.tail.prev.next = null;\r\n      this.tail = this.tail.prev;\r\n    }\r\n    this.length--;\r\n  }\r\n\r\n  // add data to the first place of the list\r\n  unshift(data) {\r\n    const newNode = new Node(data);\r\n    if (this.length === 0) {\r\n      this.head = this.tail = newNode;\r\n    }\r\n    else {\r\n      newNode.next = this.head;\r\n      this.head.prev = newNode;\r\n      this.head = newNode;\r\n    }\r\n    this.length++;\r\n  }\r\n\r\n  // remove data at the first place of the list\r\n  shift() {\r\n    if (this.length === 0) {\r\n      console.log(\"The list is empty. Cannot shift().\");\r\n      return;\r\n    }\r\n    else if (this.length === 1) {\r\n      this.head = this.tail = null;\r\n    }\r\n    else {\r\n      this.head.next.prev = null;\r\n      this.head = this.head.next;\r\n    }\r\n    this.length--;\r\n  }\r\n\r\n  // insert data into the specified index\r\n  insertAt(insertIndex, data) {\r\n    if (insertIndex < 0 || insertIndex > this.length) {\r\n      console.log(\"Insert index out of bounds.\");\r\n      return;\r\n    }\r\n    else if (insertIndex === 0) {\r\n      return this.unshift(data);\r\n    }\r\n    else if (insertIndex === this.length) {\r\n      return this.append(data);\r\n    }\r\n    else {\r\n      const newNode = new Node(data);\r\n      let oneBeforeInsertNode = this.head;\r\n      for (let i = 0; i < insertIndex - 1; i++) {\r\n        oneBeforeInsertNode = oneBeforeInsertNode.next;\r\n      }\r\n      newNode.prev = oneBeforeInsertNode;\r\n      newNode.next = oneBeforeInsertNode.next;\r\n      oneBeforeInsertNode.next.prev = newNode;\r\n      oneBeforeInsertNode.next = newNode;\r\n      this.length++;\r\n    }\r\n  }\r\n\r\n  // remove data from the specified index\r\n  removeAt(removeIndex) {\r\n    if (removeIndex < 0 || removeIndex >= this.length) {\r\n      console.log(\"Remove index out of bounds.\");\r\n      return;\r\n    }\r\n    else if (this.length === 0) {\r\n      console.log(\"The list is empty. Cannot removeAt().\");\r\n      return;\r\n    }\r\n    else if (removeIndex === 0) {\r\n      return this.unshift();\r\n    }\r\n    else if (removeIndex === this.length - 1) {\r\n      return this.pop();\r\n    }\r\n    else {\r\n      let oneBeforeRemoveNode = this.head;\r\n      for (let i = 0; i < removeIndex - 1; i++) {\r\n        oneBeforeRemoveNode = oneBeforeRemoveNode.next;\r\n      }\r\n      oneBeforeRemoveNode.next = oneBeforeRemoveNode.next.next;\r\n      oneBeforeRemoveNode.next.next.prev = oneBeforeRemoveNode;\r\n      this.length--;\r\n    }\r\n  }\r\n\r\n  // return node's index if found\r\n  search(value) {\r\n    let currentNode = this.head;\r\n    let index = 0;\r\n\r\n    while (currentNode) {\r\n      if (currentNode.data === value) {\r\n        return index;\r\n      }\r\n      currentNode = currentNode.next;\r\n      index++;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  clear() {\r\n    this.head = this.tail = null;\r\n    this.length = 0;\r\n  }\r\n\r\n  print() {\r\n    let currentNode = this.head;\r\n    while (currentNode) {\r\n      console.log(currentNode.data);\r\n      currentNode = currentNode.next;\r\n    }\r\n  }\r\n\r\n  // return all node data in the form of an array for rendering\r\n  getAllNodesForRender() {\r\n    const nodes = [];\r\n    let currentNode = this.head;\r\n    while (currentNode) {\r\n      nodes.push({\r\n        id: currentNode.id,\r\n        data: currentNode.data\r\n      });\r\n      currentNode = currentNode.next;\r\n    }\r\n\r\n    return nodes;\r\n  }\r\n}\r\n\r\nexport const DLL = new DLinkedList();\r\n\r\n// const myDoublyLinkedList = new DLinkedList(1);\r\n// myDoublyLinkedList.shift();\r\n// myDoublyLinkedList.append(2);\r\n// myDoublyLinkedList.append(3);\r\n// myDoublyLinkedList.unshift(100);\r\n// myDoublyLinkedList.append(4);\r\n// myDoublyLinkedList.insertAt(4, 'a');\r\n\r\n// myDoublyLinkedList.removeAt(2);\r\n\r\n// myDoublyLinkedList.clear();\r\n\r\n// myDoublyLinkedList.print();","import React, { useState, useEffect } from 'react';\r\n\r\nimport { DLL } from './DLL_class';\r\nimport './doublyLinkedList.css';\r\n\r\nconst DoublyLinkedList = () => {\r\n  const [nodeData, setNodeData] = useState([]);\r\n  const [inputData, setInputData] = useState('');\r\n  const [inputIndex, setInputIndex] = useState('');\r\n\r\n  const handleChangeInputData = (e) => {\r\n    setInputData(e.target.value);\r\n  }\r\n\r\n  const handleChangeInputIndex = (e) => {\r\n    setInputIndex(e.target.value);\r\n  }\r\n\r\n  const handleAppendDLL = () => {\r\n    if (inputData.trim() === '') {\r\n      return alert('Please input valid data.');\r\n    }\r\n    DLL.append(inputData);\r\n    setNodeData(DLL.getAllNodesForRender());\r\n    setInputData('');\r\n  }\r\n\r\n  const handlePopDLL = () => {\r\n    if (nodeData.length === 0) {\r\n      return alert(\"The list is empty.\");\r\n    }\r\n    DLL.pop();\r\n    setNodeData(DLL.getAllNodesForRender());\r\n  }\r\n\r\n  const handleUnshiftDLL = () => {\r\n    if (inputData.trim() === '') {\r\n      return alert('Please input valid data');\r\n    }\r\n    DLL.unshift(inputData);\r\n    setNodeData(DLL.getAllNodesForRender());\r\n    setInputData('');\r\n  }\r\n\r\n  const handleShiftDLL = () => {\r\n    if (nodeData.length === 0) {\r\n      return alert(\"The list is empty.\");\r\n    }\r\n    DLL.shift();\r\n    setNodeData(DLL.getAllNodesForRender());\r\n  }\r\n\r\n  const handleClearDLL = () => {\r\n    if (nodeData.length === 0) {\r\n      return alert(\"The list is empty.\");\r\n    }\r\n    if (window.confirm('Would you clear the list?')) {\r\n      DLL.clear();\r\n      setNodeData(DLL.getAllNodesForRender());\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"doubly-linked-list\">\r\n      <h1 className=\"ddl-header\">Doubly Linked List</h1>\r\n      <div className=\"dll-actions\">\r\n        <div className=\"dll-input\">\r\n          <label className=\"dll-input-label\">\r\n            Index:\r\n            <input\r\n              className=\"dll-input-field\"\r\n              type=\"text\"\r\n              value={inputIndex}\r\n              onChange={handleChangeInputIndex}\r\n            />\r\n          </label>\r\n          <label className=\"dll-input-label\">\r\n            Data:\r\n            <input\r\n              className=\"dll-input-field\"\r\n              type=\"text\"\r\n              value={inputData}\r\n              onChange={handleChangeInputData}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div className=\"dll-buttons\">\r\n          <button\r\n            className=\"btn btn-dll-append\"\r\n            type=\"button\"\r\n            onClick={handleAppendDLL}\r\n          >APPEND</button>\r\n          <button\r\n            className=\"btn btn-dll-pop\"\r\n            type=\"button\"\r\n            onClick={handlePopDLL}\r\n          >POP</button>\r\n          <button\r\n            className=\"btn btn-dll-unshift\"\r\n            type=\"button\"\r\n            onClick={handleUnshiftDLL}\r\n          >UNSHIFT</button>\r\n          <button\r\n            className=\"btn btn-dll-shift\"\r\n            type=\"button\"\r\n            onClick={handleShiftDLL}\r\n          >SHIFT</button>\r\n          <button\r\n            className=\"btn btn-dll-clear\"\r\n            type=\"button\"\r\n            onClick={handleClearDLL}\r\n          >CLEAR</button>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        {nodeData.map(node => (\r\n          <div key={node.id}>{node.data}</div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default DoublyLinkedList;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Main from './components/Main';\nimport DoublyLinkedList from './components/doublyLinkedList/DoublyLinkedList';\nimport './app.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/dsvisualizer\" component={Main} exact={true} />\n        <Route path=\"/dll\" component={DoublyLinkedList} exact={true} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}