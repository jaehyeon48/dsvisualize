{"version":3,"sources":["components/Main.js","components/doublyLinkedList/DLL_class.js","components/doublyLinkedList/DoublyLinkedList.js","App.js","index.js"],"names":["Main","history","useHistory","className","onClick","push","Node","_data","_prev","_next","this","prev","next","data","id","uuidv4","DLL","head","tail","length","newNode","console","log","insertIndex","unshift","append","oneBeforeInsertNode","i","removeIndex","shift","pop","oneBeforeRemoveNode","value","currentNode","index","nodes","DoublyLinkedList","useState","nodeData","setNodeData","inputData","setInputData","inputIndex","setInputIndex","handleSetNodeData","getAllNodesForRender","type","onChange","e","target","trim","alert","isNaN","parseInt","insertAt","removeAt","window","confirm","clear","map","node","key","App","path","component","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.035cef6f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport './main.css';\r\n\r\nconst Main = () => {\r\n  let history = useHistory();\r\n\r\n  const redirectToSLL = () => {\r\n    history.push('/sll');\r\n  }\r\n\r\n  const redirectToDLL = () => {\r\n    history.push('/dll');\r\n  }\r\n\r\n  const redirectToStack = () => {\r\n    history.push('/stack');\r\n  }\r\n\r\n  const redirectToQueue = () => {\r\n    history.push('/queue');\r\n  }\r\n\r\n  const redirectToBST = () => {\r\n    history.push('/bst');\r\n  }\r\n\r\n  return (\r\n    <div className=\"main-page\">\r\n      <h1 className=\"main-page-header\">\r\n        Data Structures Visualizer\r\n      </h1>\r\n      <div className=\"select-data-structures\">\r\n        <div\r\n          className=\"data-structures-item sll\"\r\n          onClick={redirectToSLL}\r\n        >Singly Linked List</div>\r\n        <div\r\n          className=\"data-structures-item dll\"\r\n          onClick={redirectToDLL}\r\n        >Doubly Linked List</div>\r\n        <div\r\n          className=\"data-structures-item stack\"\r\n          onClick={redirectToStack}\r\n        >Stack</div>\r\n        <div\r\n          className=\"data-structures-item queue\"\r\n          onClick={redirectToQueue}\r\n        >Queue</div>\r\n        <div\r\n          className=\"data-structures-item bst\"\r\n          onClick={redirectToBST}\r\n        >Binary Search Tree</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import { v4 as uuidv4 } from 'uuid';\r\n\r\nclass Node {\r\n  constructor(_data = null, _prev = null, _next = null) {\r\n    this.prev = _prev;\r\n    this.next = _next;\r\n    this.data = _data;\r\n    this.id = uuidv4();\r\n  }\r\n}\r\n\r\nclass DLinkedList {\r\n  constructor() {\r\n    this.head = null\r\n    this.tail = null;\r\n    this.length = 0;\r\n  }\r\n\r\n  // add data to the last place of the list\r\n  append(data) {\r\n    const newNode = new Node(data);\r\n    if (this.length === 0) {\r\n      this.head = this.tail = newNode;\r\n    }\r\n    else {\r\n      newNode.prev = this.tail;\r\n      this.tail.next = newNode;\r\n      this.tail = newNode;\r\n    }\r\n    this.length++;\r\n  }\r\n\r\n  // remove data at the last place of the list\r\n  pop() {\r\n    if (this.length === 0) {\r\n      console.log(\"The list is empty. Cannot pop().\");\r\n      return;\r\n    }\r\n    else if (this.length === 1) {\r\n      this.head = this.tail = null;\r\n    }\r\n    else {\r\n      this.tail.prev.next = null;\r\n      this.tail = this.tail.prev;\r\n    }\r\n    this.length--;\r\n  }\r\n\r\n  // add data to the first place of the list\r\n  unshift(data) {\r\n    const newNode = new Node(data);\r\n    if (this.length === 0) {\r\n      this.head = this.tail = newNode;\r\n    }\r\n    else {\r\n      newNode.next = this.head;\r\n      this.head.prev = newNode;\r\n      this.head = newNode;\r\n    }\r\n    this.length++;\r\n  }\r\n\r\n  // remove data at the first place of the list\r\n  shift() {\r\n    if (this.length === 0) {\r\n      console.log(\"The list is empty. Cannot shift().\");\r\n      return;\r\n    }\r\n    else if (this.length === 1) {\r\n      this.head = this.tail = null;\r\n    }\r\n    else {\r\n      this.head.next.prev = null;\r\n      this.head = this.head.next;\r\n    }\r\n    this.length--;\r\n  }\r\n\r\n  // insert data into the specified index\r\n  insertAt(insertIndex, data) {\r\n    if (insertIndex < 0 || insertIndex > this.length) {\r\n      console.log(\"Insert index out of bounds.\");\r\n      return -1;\r\n    }\r\n    else if (insertIndex === 0) {\r\n      return this.unshift(data);\r\n    }\r\n    else if (insertIndex === this.length) {\r\n      return this.append(data);\r\n    }\r\n    else {\r\n      const newNode = new Node(data);\r\n      let oneBeforeInsertNode = this.head;\r\n      for (let i = 0; i < insertIndex - 1; i++) {\r\n        oneBeforeInsertNode = oneBeforeInsertNode.next;\r\n      }\r\n      newNode.prev = oneBeforeInsertNode;\r\n      newNode.next = oneBeforeInsertNode.next;\r\n      oneBeforeInsertNode.next.prev = newNode;\r\n      oneBeforeInsertNode.next = newNode;\r\n      this.length++;\r\n    }\r\n  }\r\n\r\n  // remove data from the specified index\r\n  removeAt(removeIndex) {\r\n    if (removeIndex < 0 || removeIndex >= this.length) {\r\n      console.log(\"Remove index out of bounds.\");\r\n      return -1;\r\n    }\r\n    else if (this.length === 0) {\r\n      console.log(\"The list is empty. Cannot removeAt().\");\r\n      return;\r\n    }\r\n    else if (removeIndex === 0) {\r\n      return this.shift();\r\n    }\r\n    else if (removeIndex === this.length - 1) {\r\n      return this.pop();\r\n    }\r\n    else {\r\n      let oneBeforeRemoveNode = this.head;\r\n      for (let i = 0; i < removeIndex - 1; i++) {\r\n        oneBeforeRemoveNode = oneBeforeRemoveNode.next;\r\n      }\r\n      oneBeforeRemoveNode.next = oneBeforeRemoveNode.next.next;\r\n      oneBeforeRemoveNode.next.next.prev = oneBeforeRemoveNode;\r\n      this.length--;\r\n    }\r\n  }\r\n\r\n  // return node's index if found\r\n  search(value) {\r\n    let currentNode = this.head;\r\n    let index = 0;\r\n\r\n    while (currentNode) {\r\n      if (currentNode.data === value) {\r\n        return index;\r\n      }\r\n      currentNode = currentNode.next;\r\n      index++;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  clear() {\r\n    this.head = this.tail = null;\r\n    this.length = 0;\r\n  }\r\n\r\n  print() {\r\n    let currentNode = this.head;\r\n    while (currentNode) {\r\n      console.log(currentNode.data);\r\n      currentNode = currentNode.next;\r\n    }\r\n  }\r\n\r\n  // return all node data in the form of an array for rendering\r\n  getAllNodesForRender() {\r\n    const nodes = [];\r\n    let currentNode = this.head;\r\n    while (currentNode) {\r\n      nodes.push({\r\n        id: currentNode.id,\r\n        data: currentNode.data\r\n      });\r\n      currentNode = currentNode.next;\r\n    }\r\n\r\n    return nodes;\r\n  }\r\n}\r\n\r\nexport const DLL = new DLinkedList();\r\n\r\n// const myDoublyLinkedList = new DLinkedList(1);\r\n// myDoublyLinkedList.shift();\r\n// myDoublyLinkedList.append(2);\r\n// myDoublyLinkedList.append(3);\r\n// myDoublyLinkedList.unshift(100);\r\n// myDoublyLinkedList.append(4);\r\n// myDoublyLinkedList.insertAt(4, 'a');\r\n\r\n// myDoublyLinkedList.removeAt(2);\r\n\r\n// myDoublyLinkedList.clear();\r\n\r\n// myDoublyLinkedList.print();","import React, { useState, useEffect } from 'react';\r\n\r\nimport { DLL } from './DLL_class';\r\nimport './doublyLinkedList.css';\r\n\r\nconst DoublyLinkedList = () => {\r\n  const [nodeData, setNodeData] = useState([]);\r\n  const [inputData, setInputData] = useState('');\r\n  const [inputIndex, setInputIndex] = useState('');\r\n\r\n  const handleChangeInputData = (e) => {\r\n    setInputData(e.target.value);\r\n  }\r\n\r\n  const handleChangeInputIndex = (e) => {\r\n    setInputIndex(e.target.value);\r\n  }\r\n\r\n  const handleSetNodeData = () => {\r\n    setNodeData(DLL.getAllNodesForRender());\r\n    setInputData('');\r\n    setInputIndex('');\r\n  }\r\n\r\n  const handleAppendDLL = () => {\r\n    if (inputData.trim() === '') {\r\n      return alert('Please input valid data.');\r\n    }\r\n    DLL.append(inputData);\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handlePopDLL = () => {\r\n    if (nodeData.length === 0) {\r\n      return alert(\"The list is empty.\");\r\n    }\r\n    DLL.pop();\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handleUnshiftDLL = () => {\r\n    if (inputData.trim() === '') {\r\n      return alert('Please input valid data');\r\n    }\r\n    DLL.unshift(inputData);\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handleShiftDLL = () => {\r\n    if (nodeData.length === 0) {\r\n      return alert(\"The list is empty.\");\r\n    }\r\n    DLL.shift();\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handleInsertAtDLL = () => {\r\n    if (inputIndex.trim() === '' || isNaN(parseInt(inputIndex))) {\r\n      return alert('Please input valid index');\r\n    }\r\n    if (inputData.trim() === '') {\r\n      return alert('Please input valid data');\r\n    }\r\n\r\n    const insertAtResult = DLL.insertAt(parseInt(inputIndex), inputData);\r\n    if (insertAtResult === -1) {\r\n      return alert('Index out of bounds.');\r\n    }\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handleRemoveAtDLL = () => {\r\n    if (inputIndex.trim() === '' || isNaN(parseInt(inputIndex))) {\r\n      return alert('Please input valid index');\r\n    }\r\n    const removeAtResult = DLL.removeAt(parseInt(inputIndex));\r\n    if (removeAtResult === -1) {\r\n      return alert('Index out of bounds.');\r\n    }\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handleClearDLL = () => {\r\n    if (nodeData.length === 0) {\r\n      return alert(\"The list is empty.\");\r\n    }\r\n    if (window.confirm('Would you clear the list?')) {\r\n      DLL.clear();\r\n      handleSetNodeData();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"doubly-linked-list\">\r\n      <h1 className=\"ddl-header\">Doubly Linked List</h1>\r\n      <div className=\"dll-actions\">\r\n        <div className=\"dll-input\">\r\n          <label className=\"dll-input-label\">\r\n            Index:\r\n            <input\r\n              className=\"dll-input-field\"\r\n              type=\"text\"\r\n              value={inputIndex}\r\n              onChange={handleChangeInputIndex}\r\n            />\r\n          </label>\r\n          <label className=\"dll-input-label\">\r\n            Data:\r\n            <input\r\n              className=\"dll-input-field\"\r\n              type=\"text\"\r\n              value={inputData}\r\n              onChange={handleChangeInputData}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div className=\"dll-buttons\">\r\n          <button\r\n            className=\"btn btn-dll-append\"\r\n            type=\"button\"\r\n            onClick={handleAppendDLL}\r\n          >APPEND</button>\r\n          <button\r\n            className=\"btn btn-dll-pop\"\r\n            type=\"button\"\r\n            onClick={handlePopDLL}\r\n          >POP</button>\r\n          <button\r\n            className=\"btn btn-dll-unshift\"\r\n            type=\"button\"\r\n            onClick={handleUnshiftDLL}\r\n          >UNSHIFT</button>\r\n          <button\r\n            className=\"btn btn-dll-shift\"\r\n            type=\"button\"\r\n            onClick={handleShiftDLL}\r\n          >SHIFT</button>\r\n          <button\r\n            className=\"btn btn-dll-insertAt\"\r\n            type=\"button\"\r\n            onClick={handleInsertAtDLL}\r\n          >INSERT AT</button>\r\n          <button\r\n            className=\"btn btn-dll-removeAt\"\r\n            type=\"button\"\r\n            onClick={handleRemoveAtDLL}\r\n          >REMOVE AT</button>\r\n          <button\r\n            className=\"btn btn-dll-clear\"\r\n            type=\"button\"\r\n            onClick={handleClearDLL}\r\n          >CLEAR</button>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        {nodeData.map(node => (\r\n          <div key={node.id}>{node.data}</div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default DoublyLinkedList;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Main from './components/Main';\nimport DoublyLinkedList from './components/doublyLinkedList/DoublyLinkedList';\nimport './app.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/dsvisualizer\" component={Main} exact={true} />\n        <Route path=\"/dll\" component={DoublyLinkedList} exact={true} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}