{"version":3,"sources":["components/Main.js","components/ReturnToHome.js","components/singlyLinkedList/SinglyLinkedList.js","components/doublyLinkedList/DllCanvas.js","components/doublyLinkedList/DLL_class.js","components/doublyLinkedList/DoublyLinkedList.js","App.js","index.js"],"names":["Main","history","useHistory","className","onClick","push","ReturnToHome","aria-hidden","focusable","data-prefix","data-icon","role","xmlns","viewBox","fill","d","SinglyLinkedList","Fragment","DllCanvas","nodes","canvasRef","useRef","useEffect","canvas","current","ctx","getContext","canvasWidth","offsetWidth","canvasHeight","offsetHeight","style","width","height","draw","rectWidth","rectHeight","startingPointX","startingPointY","horizArrowLen","vertArrowLen","fontSize","nodeLength","length","forEach","nodeData","i","strokeStyle","fillStyle","textAlign","shadowBlur","font","rectX","rectY","printX","printY","strokeRect","printData","headTextWidth","measureText","headTextX","headTextY","fillText","arrowFromX","fArrowY","arrowToX","bArrowY","drawForwardArrow","drawBackwardArrow","tailTextWidth","tailTextX","tailTextY","vertFwArrowX","vertBwArrowX","vertArrowFromY","vertArrowToY","fromX","fromY","toX","toY","beginPath","dx","dy","angle","Math","atan2","moveTo","lineTo","cos","PI","sin","stroke","context","text","x","y","lineHeight","fitWidth","lineNum","str","substr","ref","Node","_data","_prev","_next","this","prev","next","data","DLL","head","tail","newNode","console","log","insertIndex","unshift","append","oneBeforeInsertNode","removeIndex","shift","pop","oneBeforeRemoveNode","value","currentNode","index","DoublyLinkedList","useState","setNodeData","setNodeLength","isMaxLength","setIsMaxLength","inputData","setInputData","inputIndex","setInputIndex","handleSetNodeData","getAllNodesForRender","getLength","color","maxLengthColor","type","onChange","e","target","trim","alert","disabled","isNaN","parseInt","insertAt","removeAt","window","confirm","clear","App","basename","path","component","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd957262.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport './main.css';\r\n\r\nconst Main = () => {\r\n  let history = useHistory();\r\n\r\n  const redirectToSLL = () => {\r\n    history.push('/sll');\r\n  }\r\n\r\n  const redirectToDLL = () => {\r\n    history.push('/dll');\r\n  }\r\n\r\n  const redirectToStack = () => {\r\n    history.push('/stack');\r\n  }\r\n\r\n  const redirectToQueue = () => {\r\n    history.push('/queue');\r\n  }\r\n\r\n  const redirectToBST = () => {\r\n    history.push('/bst');\r\n  }\r\n\r\n  return (\r\n    <div className=\"main-page\">\r\n      <h1 className=\"main-page-header\">\r\n        Data Structures Visualizer\r\n      </h1>\r\n      <div className=\"select-data-structures\">\r\n        <div\r\n          className=\"data-structures-item sll\"\r\n          onClick={redirectToSLL}\r\n        >Singly Linked List</div>\r\n        <div\r\n          className=\"data-structures-item dll\"\r\n          onClick={redirectToDLL}\r\n        >Doubly Linked List</div>\r\n        <div\r\n          className=\"data-structures-item stack\"\r\n          onClick={redirectToStack}\r\n        >Stack</div>\r\n        <div\r\n          className=\"data-structures-item queue\"\r\n          onClick={redirectToQueue}\r\n        >Queue</div>\r\n        <div\r\n          className=\"data-structures-item bst\"\r\n          onClick={redirectToBST}\r\n        >Binary Search Tree</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst ReturnToHome = () => {\r\n  let history = useHistory();\r\n  const redirectToHome = () => {\r\n    history.push('/');\r\n  }\r\n\r\n  return (\r\n    <div className=\"return-to-home\" onClick={redirectToHome}>\r\n      <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"home\" className=\"svg-inline--fa fa-home fa-w-18\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path fill=\"currentColor\" d=\"M280.37 148.26L96 300.11V464a16 16 0 0 0 16 16l112.06-.29a16 16 0 0 0 15.92-16V368a16 16 0 0 1 16-16h64a16 16 0 0 1 16 16v95.64a16 16 0 0 0 16 16.05L464 480a16 16 0 0 0 16-16V300L295.67 148.26a12.19 12.19 0 0 0-15.3 0zM571.6 251.47L488 182.56V44.05a12 12 0 0 0-12-12h-56a12 12 0 0 0-12 12v72.61L318.47 43a48 48 0 0 0-61 0L4.34 251.47a12 12 0 0 0-1.6 16.9l25.5 31A12 12 0 0 0 45.15 301l235.22-193.74a12.19 12.19 0 0 1 15.3 0L530.9 301a12 12 0 0 0 16.9-1.6l25.5-31a12 12 0 0 0-1.7-16.93z\"></path></svg>\r\n      <span>HOME</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReturnToHome;\r\n","import React from 'react';\r\n\r\nimport ReturnToHome from '../ReturnToHome';\r\nimport './singlyLinkedList.css';\r\n\r\nconst SinglyLinkedList = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <ReturnToHome />\r\n      <div className=\"singly-linked-list\">\r\n        <h1 className=\"sll-header\">Singly Linked List</h1>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default SinglyLinkedList;","import React, { useEffect, useRef } from 'react'\r\n\r\nconst DllCanvas = ({\r\n  nodes\r\n}) => {\r\n  const canvasRef = useRef(null);\r\n\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const canvasWidth = canvas.offsetWidth;\r\n    const canvasHeight = canvas.offsetHeight;\r\n    canvas.style.width = '100%';\r\n    canvas.style.height = '100%';\r\n    canvas.width = canvasWidth;\r\n    canvas.height = canvasHeight;\r\n\r\n    draw(ctx, nodes, canvasWidth, canvasHeight);\r\n  }, [nodes]);\r\n\r\n  const draw = (ctx, nodes, canvasWidth, canvasHeight) => {\r\n    // define rectangle's width and height with respect to the canvas' size\r\n    let rectWidth;\r\n    let rectHeight;\r\n    let startingPointX;\r\n    let startingPointY;\r\n    let horizArrowLen; // horizontal arrow's length\r\n    let vertArrowLen; // vertical arrow's length\r\n    let fontSize;\r\n    const lineHeightOfData = 20; // line height of data inside of each nodes\r\n    const maxWidthOfData = 200; // maximum width of data inside of each nodes\r\n    if (canvasWidth >= 1408) { // 1440px wide\r\n      rectWidth = canvasWidth * 0.17;\r\n      rectHeight = canvasHeight * 0.2;\r\n      startingPointX = canvasWidth * 0.01;\r\n      startingPointY = canvasHeight * 0.05;\r\n      horizArrowLen = canvasWidth * 0.1;\r\n      vertArrowLen = canvasHeight * 0.15;\r\n      fontSize = 24;\r\n    }\r\n    else if (canvasWidth >= 992) { // 1024px wide\r\n      rectWidth = canvasWidth * 0.1682;\r\n      rectHeight = canvasHeight * 0.1748;\r\n      startingPointX = canvasWidth * 0.01;\r\n      startingPointY = canvasHeight * 0.05;\r\n      horizArrowLen = canvasWidth * 0.1024;\r\n      vertArrowLen = canvasHeight * 0.1878;\r\n      fontSize = 22;\r\n\r\n    }\r\n    else if (canvasWidth >= 736) { // 768px wide\r\n      rectWidth = canvasWidth * 0.1502;\r\n      rectHeight = canvasHeight * 0.1748;\r\n      startingPointX = canvasWidth * 0.01;\r\n      startingPointY = canvasHeight * 0.05;\r\n      horizArrowLen = canvasWidth * 0.1264;\r\n      vertArrowLen = canvasHeight * 0.1878;\r\n      fontSize = 18;\r\n    }\r\n    else if (canvasWidth >= 393) { // 425px wide\r\n      rectWidth = canvasWidth * 0.1799;\r\n      rectHeight = canvasHeight * 0.19;\r\n      startingPointX = canvasWidth * 0.01;\r\n      startingPointY = canvasHeight * 0.05;\r\n      horizArrowLen = canvasWidth * 0.0868;\r\n      vertArrowLen = canvasHeight * 0.165;\r\n      fontSize = 14;\r\n    }\r\n\r\n    const nodeLength = nodes.length;\r\n    nodes.forEach((nodeData, i) => {\r\n      ctx.strokeStyle = '#003FFF';\r\n      ctx.fillStyle = '#000';\r\n      ctx.textAlign = 'start';\r\n      ctx.shadowBlur = 2;\r\n      ctx.font = `normal ${fontSize}px sans-serif`;\r\n\r\n      if (i < 4) {\r\n        // x, y point of a rectangle, respectively\r\n        const rectX = startingPointX + (rectWidth + horizArrowLen) * i;\r\n        const rectY = startingPointY;\r\n        // x, y point of print, respectively\r\n        const printX = (startingPointX + rectWidth * 0.1) + (rectWidth + horizArrowLen) * i;\r\n        const printY = startingPointY + (rectHeight * 0.25);\r\n\r\n        ctx.strokeRect(rectX, rectY, rectWidth, rectHeight);\r\n        printData(ctx, nodeData, printX, printY, lineHeightOfData, maxWidthOfData);\r\n\r\n        // print \"head\" text\r\n        ctx.fillStyle = \"red\";\r\n        if (i === 0) {\r\n          const headTextWidth = ctx.measureText('head').width;\r\n          const headTextX = startingPointX + (rectWidth - headTextWidth) / 2; // x point of \"head\" text\r\n          const headTextY = startingPointY * 0.8 // y point of \"head\" text\r\n          ctx.fillText('head', headTextX, headTextY);\r\n        }\r\n        if (i !== 0) {\r\n          // both arrows' \"from\" x point\r\n          const arrowFromX = (startingPointX + rectWidth) + (horizArrowLen + rectWidth) * (i - 1);\r\n          // y point of forward arrow (-->)\r\n          const fArrowY = startingPointY + (rectHeight * 0.333);\r\n          // both arrows' \"to\" x point\r\n          const arrowToX = startingPointX + (rectWidth + horizArrowLen) * i;\r\n          // y point of backward arrow (<--)\r\n          const bArrowY = startingPointY + (rectHeight * 0.667);\r\n\r\n          drawForwardArrow(ctx, arrowFromX, fArrowY, arrowToX, fArrowY);\r\n          drawBackwardArrow(ctx, arrowFromX, bArrowY, arrowToX, bArrowY);\r\n        }\r\n        if (i === nodeLength - 1) { // if the last node, print \"tail\" text\r\n          ctx.fillStyle = \"red\";\r\n          const tailTextWidth = ctx.measureText('tail').width;\r\n          // x point of \"tail\" text\r\n          const tailTextX = startingPointX + (rectWidth - tailTextWidth) / 2 + (rectWidth + horizArrowLen) * i\r\n          // y point of \"tail\" text\r\n          const tailTextY = (startingPointY * 1.65) + rectHeight;\r\n\r\n          ctx.fillText(\"tail\", tailTextX, tailTextY);\r\n        }\r\n      }\r\n      else if (i >= 4 && i < 8) {\r\n        // x, y point of a rectangle, respectively\r\n        const rectX = canvasWidth - (startingPointX + rectWidth) - (horizArrowLen + rectWidth) * (i - 4);\r\n        const rectY = startingPointY + rectHeight + vertArrowLen;\r\n        // x, y point of print, respectively\r\n        const printX = canvasWidth - (startingPointX + rectWidth * 0.9) - (horizArrowLen + rectWidth) * (i - 4);\r\n        const printY = startingPointY + rectHeight * 1.25 + vertArrowLen;\r\n\r\n        ctx.strokeRect(rectX, rectY, rectWidth, rectHeight);\r\n        printData(ctx, nodeData, printX, printY, lineHeightOfData, maxWidthOfData);\r\n\r\n        if (i !== 4) {\r\n          // both arrows' \"from\" x point\r\n          const arrowFromX = canvasWidth - startingPointX - (rectWidth + horizArrowLen) * (i - 4);\r\n          // \"from\" y point of forward arrow (-->)\r\n          const fArrowY = startingPointY + rectHeight * 1.333 + vertArrowLen;\r\n          // both arrows' \"to\" x point\r\n          const arrowToX = canvasWidth - (startingPointX + rectWidth) - (horizArrowLen + rectWidth) * (i - 5);\r\n          // y point of backward arrow (<--)\r\n          const bArrowY = startingPointY + rectHeight * 1.667 + vertArrowLen;\r\n\r\n          drawForwardArrow(ctx, arrowFromX, fArrowY, arrowToX, fArrowY);\r\n          drawBackwardArrow(ctx, arrowFromX, bArrowY, arrowToX, bArrowY);\r\n        }\r\n        else { // vertical arrow\r\n          // vertical forward arrow's (^) x point\r\n          const vertFwArrowX = canvasWidth - startingPointX - (rectWidth * 0.667);\r\n          // vertical backward arrow's (v) x point\r\n          const vertBwArrowX = canvasWidth - startingPointX - (rectWidth * 0.333);\r\n          // vertical arrows' \"from\" y point\r\n          const vertArrowFromY = startingPointY + rectHeight;\r\n          // vertical arrow's \"to\" y point\r\n          const vertArrowToY = startingPointY + rectHeight + vertArrowLen;\r\n\r\n          drawForwardArrow(ctx, vertFwArrowX, vertArrowFromY, vertFwArrowX, vertArrowToY);\r\n          drawBackwardArrow(ctx, vertBwArrowX, vertArrowFromY, vertBwArrowX, vertArrowToY);\r\n        }\r\n        if (i === nodeLength - 1) { // if the last node, print \"tail\" text\r\n          ctx.fillStyle = \"red\";\r\n          const tailTextWidth = ctx.measureText('tail').width;\r\n          // x point of \"tail\" text\r\n          const tailTextX = canvasWidth - startingPointX - tailTextWidth - (rectWidth - tailTextWidth) / 2 - (rectWidth + horizArrowLen) * (i - 4);\r\n          // y point of \"tail\" text\r\n          const tailTextY = (startingPointY * 1.8) + rectHeight * 2 + vertArrowLen;\r\n\r\n          ctx.fillText(\"tail\", tailTextX, tailTextY);\r\n        }\r\n      }\r\n      else if (i >= 8) {\r\n        // x, y point of a rectangle, respectively\r\n        const rectX = startingPointX + (rectWidth + horizArrowLen) * (i - 8);\r\n        const rectY = startingPointY + rectHeight * 2 + vertArrowLen * 2;\r\n        // x, y point of print, respectively\r\n        const printX = (startingPointX + rectWidth * 0.1) + (rectWidth + horizArrowLen) * (i - 8);\r\n        const printY = canvasHeight - (startingPointY + rectHeight * 0.75);\r\n\r\n        ctx.strokeRect(rectX, rectY, rectWidth, rectHeight);\r\n        printData(ctx, nodeData, printX, printY, lineHeightOfData, maxWidthOfData);\r\n        if (i !== 8) {\r\n          // both arrows' \"from\" x point\r\n          const arrowFromX = (startingPointX + rectWidth) + (horizArrowLen + rectWidth) * (i - 9);\r\n          // y point of forward arrow (-->)\r\n          const fArrowY = canvasHeight - (startingPointY + rectHeight * 0.667);\r\n          // both arrows' \"to\" x point\r\n          const arrowToX = startingPointX + (rectWidth + horizArrowLen) * (i - 8);\r\n          // y point of backward arrow (<--)\r\n          const bArrowY = canvasHeight - (startingPointY + rectHeight * 0.333);\r\n\r\n          drawForwardArrow(ctx, arrowFromX, fArrowY, arrowToX, fArrowY);\r\n          drawBackwardArrow(ctx, arrowFromX, bArrowY, arrowToX, bArrowY);\r\n        }\r\n        else { // vertical arrow\r\n          // vertical forward arrow's (^) x point\r\n          const vertFwArrowX = startingPointX + rectWidth * 0.333;\r\n          // vertical backward arrow's (v) x point\r\n          const vertBwArrowX = startingPointX + rectWidth * 0.667;\r\n          // vertical arrows' \"from\" y point\r\n          const vertArrowFromY = canvasHeight - (startingPointY + rectHeight + vertArrowLen);\r\n          // vertical arrow's \"to\" y point\r\n          const vertArrowToY = canvasHeight - (startingPointY + rectHeight);\r\n\r\n          drawForwardArrow(ctx, vertFwArrowX, vertArrowFromY, vertFwArrowX, vertArrowToY);\r\n          drawBackwardArrow(ctx, vertBwArrowX, vertArrowFromY, vertBwArrowX, vertArrowToY);\r\n        }\r\n        if (i === nodeLength - 1) { // if the last node, print \"tail\" text\r\n          ctx.fillStyle = \"red\";\r\n          const tailTextWidth = ctx.measureText('tail').width;\r\n          // x point of \"tail\" text\r\n          const tailTextX = startingPointX + (rectWidth - tailTextWidth) / 2 + (rectWidth + horizArrowLen) * (i - 8);\r\n          // y point of \"tail\" text\r\n          const tailTextY = (startingPointY * 1.65) + rectHeight * 3 + vertArrowLen * 2;\r\n\r\n          ctx.fillText(\"tail\", tailTextX, tailTextY);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  const drawForwardArrow = (ctx, fromX, fromY, toX, toY) => {\r\n    ctx.beginPath();\r\n    let headlen = 9; // length of head in pixels\r\n    let dx = toX - fromX;\r\n    let dy = toY - fromY;\r\n    let angle = Math.atan2(dy, dx);\r\n    ctx.strokeStyle = \"#000\";\r\n    ctx.moveTo(fromX, fromY);\r\n    ctx.lineTo(toX, toY);\r\n    ctx.lineTo(toX - headlen * Math.cos(angle - Math.PI / 6), toY - headlen * Math.sin(angle - Math.PI / 6));\r\n    ctx.moveTo(toX, toY);\r\n    ctx.lineTo(toX - headlen * Math.cos(angle + Math.PI / 6), toY - headlen * Math.sin(angle + Math.PI / 6));\r\n    ctx.stroke();\r\n  }\r\n\r\n  const drawBackwardArrow = (ctx, fromX, fromY, toX, toY) => {\r\n    ctx.beginPath();\r\n    let headlen = 9; // length of head in pixels\r\n    let dx = fromX - toX;\r\n    let dy = fromY - toY;\r\n    let angle = Math.atan2(dy, dx);\r\n    ctx.moveTo(toX, toY);\r\n    ctx.lineTo(fromX, fromY);\r\n    ctx.lineTo(fromX - headlen * Math.cos(angle - Math.PI / 6), fromY - headlen * Math.sin(angle - Math.PI / 6));\r\n    ctx.moveTo(fromX, fromY);\r\n    ctx.lineTo(fromX - headlen * Math.cos(angle + Math.PI / 6), fromY - headlen * Math.sin(angle + Math.PI / 6));\r\n    ctx.stroke();\r\n  }\r\n\r\n  function printData(context, text, x, y, lineHeight, fitWidth = 0, lineNum = 0) {\r\n    // if text's width is 0, no need to wrap data\r\n    if (fitWidth <= 0) {\r\n      context.fillText(text, x, y);\r\n      return;\r\n    }\r\n\r\n    // divide data until the substring's width is longer than the specified width\r\n    for (let i = 1; i <= text.length; i++) {\r\n      let str = text.substr(0, i);\r\n      if (context.measureText(str).width > fitWidth) {\r\n        if (lineNum < 5) { // truncate data from line number 6\r\n          context.fillText(text.substr(0, i - 1), x, y);\r\n        }\r\n        else {\r\n          context.fillText('', x, y);\r\n        }\r\n        printData(context, text.substr(i - 1), x, y + lineHeight, lineHeight, fitWidth, lineNum + 1);\r\n        return;\r\n      }\r\n    }\r\n    if (lineNum < 5) { // truncate data from line number 6\r\n      context.fillText(text, x, y);\r\n    }\r\n    else {\r\n      context.fillText('', x, y);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}>\r\n    </canvas>\r\n  );\r\n}\r\n\r\nexport default DllCanvas;\r\n","class Node {\r\n  constructor(_data = null, _prev = null, _next = null) {\r\n    this.prev = _prev;\r\n    this.next = _next;\r\n    this.data = _data;\r\n  }\r\n}\r\n\r\nclass DLinkedList {\r\n  constructor() {\r\n    this.head = null\r\n    this.tail = null;\r\n    this.length = 0;\r\n  }\r\n\r\n  // add data to the last place of the list\r\n  append(data) {\r\n    const newNode = new Node(data);\r\n    if (this.length === 0) {\r\n      this.head = this.tail = newNode;\r\n    }\r\n    else {\r\n      newNode.prev = this.tail;\r\n      this.tail.next = newNode;\r\n      this.tail = newNode;\r\n    }\r\n    this.length++;\r\n  }\r\n\r\n  // remove data at the last place of the list\r\n  pop() {\r\n    if (this.length === 0) {\r\n      console.log(\"The list is empty. Cannot pop().\");\r\n      return;\r\n    }\r\n    else if (this.length === 1) {\r\n      this.head = this.tail = null;\r\n    }\r\n    else {\r\n      this.tail.prev.next = null;\r\n      this.tail = this.tail.prev;\r\n    }\r\n    this.length--;\r\n  }\r\n\r\n  // add data to the first place of the list\r\n  unshift(data) {\r\n    const newNode = new Node(data);\r\n    if (this.length === 0) {\r\n      this.head = this.tail = newNode;\r\n    }\r\n    else {\r\n      newNode.next = this.head;\r\n      this.head.prev = newNode;\r\n      this.head = newNode;\r\n    }\r\n    this.length++;\r\n  }\r\n\r\n  // remove data at the first place of the list\r\n  shift() {\r\n    if (this.length === 0) {\r\n      console.log(\"The list is empty. Cannot shift().\");\r\n      return;\r\n    }\r\n    else if (this.length === 1) {\r\n      this.head = this.tail = null;\r\n    }\r\n    else {\r\n      this.head.next.prev = null;\r\n      this.head = this.head.next;\r\n    }\r\n    this.length--;\r\n  }\r\n\r\n  // insert data into the specified index\r\n  insertAt(insertIndex, data) {\r\n    if (insertIndex < 0 || insertIndex > this.length) {\r\n      console.log(\"Insert index out of bounds.\");\r\n      return -1;\r\n    }\r\n    else if (insertIndex === 0) {\r\n      return this.unshift(data);\r\n    }\r\n    else if (insertIndex === this.length) {\r\n      return this.append(data);\r\n    }\r\n    else {\r\n      const newNode = new Node(data);\r\n      let oneBeforeInsertNode = this.head;\r\n      for (let i = 0; i < insertIndex - 1; i++) {\r\n        oneBeforeInsertNode = oneBeforeInsertNode.next;\r\n      }\r\n      newNode.prev = oneBeforeInsertNode;\r\n      newNode.next = oneBeforeInsertNode.next;\r\n      oneBeforeInsertNode.next.prev = newNode;\r\n      oneBeforeInsertNode.next = newNode;\r\n      this.length++;\r\n    }\r\n  }\r\n\r\n  // remove data from the specified index\r\n  removeAt(removeIndex) {\r\n    if (removeIndex < 0 || removeIndex >= this.length) {\r\n      console.log(\"Remove index out of bounds.\");\r\n      return -1;\r\n    }\r\n    else if (this.length === 0) {\r\n      console.log(\"The list is empty. Cannot removeAt().\");\r\n      return;\r\n    }\r\n    else if (removeIndex === 0) {\r\n      return this.shift();\r\n    }\r\n    else if (removeIndex === this.length - 1) {\r\n      return this.pop();\r\n    }\r\n    else {\r\n      let oneBeforeRemoveNode = this.head;\r\n      for (let i = 0; i < removeIndex - 1; i++) {\r\n        oneBeforeRemoveNode = oneBeforeRemoveNode.next;\r\n      }\r\n      oneBeforeRemoveNode.next = oneBeforeRemoveNode.next.next;\r\n      oneBeforeRemoveNode.next.next.prev = oneBeforeRemoveNode;\r\n      this.length--;\r\n    }\r\n  }\r\n\r\n  // return node's index if found\r\n  search(value) {\r\n    let currentNode = this.head;\r\n    let index = 0;\r\n\r\n    while (currentNode) {\r\n      if (currentNode.data === value) {\r\n        return index;\r\n      }\r\n      currentNode = currentNode.next;\r\n      index++;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  clear() {\r\n    this.head = this.tail = null;\r\n    this.length = 0;\r\n  }\r\n\r\n  print() {\r\n    let currentNode = this.head;\r\n    while (currentNode) {\r\n      console.log(currentNode.data);\r\n      currentNode = currentNode.next;\r\n    }\r\n  }\r\n\r\n  getLength() {\r\n    return this.length;\r\n  }\r\n\r\n  // return all node data in the form of an array for rendering\r\n  getAllNodesForRender() {\r\n    const nodes = [];\r\n    let currentNode = this.head;\r\n    while (currentNode) {\r\n      nodes.push(currentNode.data);\r\n      currentNode = currentNode.next;\r\n    }\r\n\r\n    return nodes;\r\n  }\r\n}\r\n\r\nexport const DLL = new DLinkedList();\r\n\r\n// const myDoublyLinkedList = new DLinkedList(1);\r\n// myDoublyLinkedList.shift();\r\n// myDoublyLinkedList.append(2);\r\n// myDoublyLinkedList.append(3);\r\n// myDoublyLinkedList.unshift(100);\r\n// myDoublyLinkedList.append(4);\r\n// myDoublyLinkedList.insertAt(4, 'a');\r\n\r\n// myDoublyLinkedList.removeAt(2);\r\n\r\n// myDoublyLinkedList.clear();\r\n\r\n// myDoublyLinkedList.print();","import React, { useState, useEffect } from 'react';\r\n\r\nimport ReturnToHome from '../ReturnToHome';\r\nimport DllCanvas from './DllCanvas';\r\nimport { DLL } from './DLL_class';\r\nimport './doublyLinkedList.css';\r\n\r\nconst DoublyLinkedList = () => {\r\n  const [nodeData, setNodeData] = useState([]);\r\n  const [nodeLength, setNodeLength] = useState(0);\r\n  const [isMaxLength, setIsMaxLength] = useState(false);\r\n  const [inputData, setInputData] = useState('');\r\n  const [inputIndex, setInputIndex] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (nodeLength >= 12) {\r\n      setIsMaxLength(true);\r\n    }\r\n    else {\r\n      setIsMaxLength(false);\r\n    }\r\n  }, [nodeLength]);\r\n\r\n  const handleChangeInputData = (e) => {\r\n    setInputData(e.target.value);\r\n  }\r\n\r\n  const handleChangeInputIndex = (e) => {\r\n    setInputIndex(e.target.value);\r\n  }\r\n\r\n  const handleSetNodeData = () => {\r\n    setNodeData(DLL.getAllNodesForRender());\r\n    setNodeLength(DLL.getLength());\r\n    setInputData('');\r\n    setInputIndex('');\r\n  }\r\n\r\n  const handleAppendDLL = () => {\r\n    if (inputData.trim() === '') {\r\n      return alert('Please input valid data.');\r\n    }\r\n    DLL.append(inputData);\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handlePopDLL = () => {\r\n    if (nodeData.length === 0) {\r\n      return alert(\"The list is empty.\");\r\n    }\r\n    DLL.pop();\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handleUnshiftDLL = () => {\r\n    if (inputData.trim() === '') {\r\n      return alert('Please input valid data');\r\n    }\r\n    DLL.unshift(inputData);\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handleShiftDLL = () => {\r\n    if (nodeData.length === 0) {\r\n      return alert(\"The list is empty.\");\r\n    }\r\n    DLL.shift();\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handleInsertAtDLL = () => {\r\n    if (inputIndex.trim() === '' || isNaN(parseInt(inputIndex))) {\r\n      return alert('Please input valid index');\r\n    }\r\n    if (inputData.trim() === '') {\r\n      return alert('Please input valid data');\r\n    }\r\n\r\n    const insertAtResult = DLL.insertAt(parseInt(inputIndex), inputData);\r\n    if (insertAtResult === -1) {\r\n      return alert('Index out of bounds.');\r\n    }\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handleRemoveAtDLL = () => {\r\n    if (inputIndex.trim() === '' || isNaN(parseInt(inputIndex))) {\r\n      return alert('Please input valid index');\r\n    }\r\n    const removeAtResult = DLL.removeAt(parseInt(inputIndex));\r\n    if (removeAtResult === -1) {\r\n      return alert('Index out of bounds.');\r\n    }\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handleClearDLL = () => {\r\n    if (nodeData.length === 0) {\r\n      return alert(\"The list is empty.\");\r\n    }\r\n    if (window.confirm('Would you clear the list?')) {\r\n      DLL.clear();\r\n      handleSetNodeData();\r\n    }\r\n  }\r\n\r\n  const maxLengthColor = () => {\r\n    if (isMaxLength) {\r\n      return { color: 'red' };\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ReturnToHome />\r\n      <div className=\"doubly-linked-list\">\r\n        <h1 className=\"dll-header\">Doubly Linked List</h1>\r\n        <div className=\"dll-actions\">\r\n          <div className=\"dll-length\">\r\n            Length: <span style={maxLengthColor()}>{nodeLength}</span> / 12\r\n          </div>\r\n          <div className=\"dll-input\">\r\n            <label className=\"dll-input-label\">\r\n              Index:\r\n            <input\r\n                className=\"dll-input-field\"\r\n                type=\"text\"\r\n                value={inputIndex}\r\n                onChange={handleChangeInputIndex}\r\n              />\r\n            </label>\r\n            <label className=\"dll-input-label\">\r\n              Data:\r\n            <input\r\n                className=\"dll-input-field\"\r\n                type=\"text\"\r\n                value={inputData}\r\n                onChange={handleChangeInputData}\r\n              />\r\n            </label>\r\n          </div>\r\n          <div className=\"dll-buttons\">\r\n            <button\r\n              className=\"btn btn-dll-append\"\r\n              type=\"button\"\r\n              onClick={handleAppendDLL}\r\n              disabled={isMaxLength}\r\n            >APPEND</button>\r\n            <button\r\n              className=\"btn btn-dll-pop\"\r\n              type=\"button\"\r\n              onClick={handlePopDLL}\r\n            >POP</button>\r\n            <button\r\n              className=\"btn btn-dll-unshift\"\r\n              type=\"button\"\r\n              onClick={handleUnshiftDLL}\r\n              disabled={isMaxLength}\r\n            >UNSHIFT</button>\r\n            <button\r\n              className=\"btn btn-dll-shift\"\r\n              type=\"button\"\r\n              onClick={handleShiftDLL}\r\n            >SHIFT</button>\r\n            <button\r\n              className=\"btn btn-dll-insertAt\"\r\n              type=\"button\"\r\n              onClick={handleInsertAtDLL}\r\n              disabled={isMaxLength}\r\n            >INSERT AT</button>\r\n            <button\r\n              className=\"btn btn-dll-removeAt\"\r\n              type=\"button\"\r\n              onClick={handleRemoveAtDLL}\r\n            >REMOVE AT</button>\r\n            <button\r\n              className=\"btn btn-dll-clear\"\r\n              type=\"button\"\r\n              onClick={handleClearDLL}\r\n            >CLEAR</button>\r\n          </div>\r\n        </div>\r\n        <div className=\"node-items\">\r\n          <DllCanvas\r\n            nodes={nodeData}\r\n          />\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n\r\n  );\r\n}\r\n\r\n\r\nexport default DoublyLinkedList;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nimport Main from './components/Main';\r\nimport SinglyLinkedList from './components/singlyLinkedList/SinglyLinkedList';\r\nimport DoublyLinkedList from './components/doublyLinkedList/DoublyLinkedList';\r\nimport './app.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router basename=\"/dsvisualizer\">\r\n      <Switch>\r\n        <Route path=\"/\" component={Main} exact={true} />\r\n        <Route path=\"/sll\" component={SinglyLinkedList} exact={true} />\r\n        <Route path=\"/dll\" component={DoublyLinkedList} exact={true} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}