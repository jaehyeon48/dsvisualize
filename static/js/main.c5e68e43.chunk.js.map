{"version":3,"sources":["components/Main.js","components/ReturnToHome.js","components/singlyLinkedList/SinglyLinkedList.js","components/doublyLinkedList/DllCanvas.js","components/doublyLinkedList/DLL_class.js","components/doublyLinkedList/DoublyLinkedList.js","App.js","index.js"],"names":["Main","history","useHistory","className","onClick","push","ReturnToHome","aria-hidden","focusable","data-prefix","data-icon","role","xmlns","viewBox","fill","d","SinglyLinkedList","Fragment","DllCanvas","nodes","canvasRef","useRef","useEffect","canvas","current","ctx","getContext","style","width","height","offsetWidth","offsetHeight","draw","nodeLength","length","forEach","nodeData","i","strokeStyle","fillStyle","textAlign","shadowBlur","font","strokeRect","printData","data","fillText","drawForwardArrow","drawBackwardArrow","fromX","fromY","toX","toY","beginPath","dx","dy","angle","Math","atan2","moveTo","lineTo","cos","PI","sin","stroke","context","text","x","y","lineHeight","fitWidth","lineNum","str","substr","measureText","ref","Node","_data","_prev","_next","this","prev","next","id","uuidv4","DLL","head","tail","newNode","console","log","insertIndex","unshift","append","oneBeforeInsertNode","removeIndex","shift","pop","oneBeforeRemoveNode","value","currentNode","index","DoublyLinkedList","useState","setNodeData","setNodeLength","isMaxLength","setIsMaxLength","inputData","setInputData","inputIndex","setInputIndex","handleSetNodeData","getAllNodesForRender","getLength","color","maxLengthColor","type","onChange","e","target","trim","alert","disabled","isNaN","parseInt","insertAt","removeAt","window","confirm","clear","App","path","component","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5e68e43.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport './main.css';\r\n\r\nconst Main = () => {\r\n  let history = useHistory();\r\n\r\n  const redirectToSLL = () => {\r\n    history.push('/sll');\r\n  }\r\n\r\n  const redirectToDLL = () => {\r\n    history.push('/dll');\r\n  }\r\n\r\n  const redirectToStack = () => {\r\n    history.push('/stack');\r\n  }\r\n\r\n  const redirectToQueue = () => {\r\n    history.push('/queue');\r\n  }\r\n\r\n  const redirectToBST = () => {\r\n    history.push('/bst');\r\n  }\r\n\r\n  return (\r\n    <div className=\"main-page\">\r\n      <h1 className=\"main-page-header\">\r\n        Data Structures Visualizer\r\n      </h1>\r\n      <div className=\"select-data-structures\">\r\n        <div\r\n          className=\"data-structures-item sll\"\r\n          onClick={redirectToSLL}\r\n        >Singly Linked List</div>\r\n        <div\r\n          className=\"data-structures-item dll\"\r\n          onClick={redirectToDLL}\r\n        >Doubly Linked List</div>\r\n        <div\r\n          className=\"data-structures-item stack\"\r\n          onClick={redirectToStack}\r\n        >Stack</div>\r\n        <div\r\n          className=\"data-structures-item queue\"\r\n          onClick={redirectToQueue}\r\n        >Queue</div>\r\n        <div\r\n          className=\"data-structures-item bst\"\r\n          onClick={redirectToBST}\r\n        >Binary Search Tree</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst ReturnToHome = () => {\r\n  let history = useHistory();\r\n  const redirectToHome = () => {\r\n    history.push('/dsvisualizer');\r\n  }\r\n\r\n  return (\r\n    <div className=\"return-to-home\" onClick={redirectToHome}>\r\n      <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"home\" className=\"svg-inline--fa fa-home fa-w-18\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path fill=\"currentColor\" d=\"M280.37 148.26L96 300.11V464a16 16 0 0 0 16 16l112.06-.29a16 16 0 0 0 15.92-16V368a16 16 0 0 1 16-16h64a16 16 0 0 1 16 16v95.64a16 16 0 0 0 16 16.05L464 480a16 16 0 0 0 16-16V300L295.67 148.26a12.19 12.19 0 0 0-15.3 0zM571.6 251.47L488 182.56V44.05a12 12 0 0 0-12-12h-56a12 12 0 0 0-12 12v72.61L318.47 43a48 48 0 0 0-61 0L4.34 251.47a12 12 0 0 0-1.6 16.9l25.5 31A12 12 0 0 0 45.15 301l235.22-193.74a12.19 12.19 0 0 1 15.3 0L530.9 301a12 12 0 0 0 16.9-1.6l25.5-31a12 12 0 0 0-1.7-16.93z\"></path></svg>\r\n      <span>HOME</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReturnToHome;\r\n","import React from 'react';\r\n\r\nimport ReturnToHome from '../ReturnToHome';\r\nimport './singlyLinkedList.css';\r\n\r\nconst SinglyLinkedList = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <ReturnToHome />\r\n      <div className=\"singly-linked-list\"></div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default SinglyLinkedList;","import React, { useEffect, useRef } from 'react'\r\n\r\nconst DllCanvas = ({\r\n  nodes\r\n}) => {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    canvas.style.width = '100%';\r\n    canvas.style.height = '100%';\r\n    canvas.width = canvas.offsetWidth;\r\n    canvas.height = canvas.offsetHeight;\r\n\r\n    draw(ctx, nodes);\r\n    // canvas_arrow(ctx, 40, 0, 100, 10);\r\n  }, [nodes]);\r\n\r\n  const draw = (ctx, nodes) => {\r\n    const nodeLength = nodes.length;\r\n    nodes.forEach((nodeData, i) => {\r\n      ctx.strokeStyle = '#003FFF';\r\n      ctx.fillStyle = '#000';\r\n      ctx.textAlign = 'start';\r\n      ctx.shadowBlur = 2;\r\n      ctx.font = 'normal 22px Roboto';\r\n\r\n      if (i < 4) {\r\n        ctx.strokeRect(30 + 400 * i, 20, 250, 120);\r\n        printData(ctx, nodeData.data, 55 + 400 * i, 50, 20, 200);\r\n        // print \"head\" text\r\n        ctx.fillStyle = \"red\";\r\n        if (i === 0) {\r\n          ctx.fillText('head', 135, 16);\r\n        }\r\n        if (i !== 0) {\r\n          drawForwardArrow(ctx, 280 + 400 * (i - 1), 65, 30 + 400 * i, 65);\r\n          drawBackwardArrow(ctx, 280 + 400 * (i - 1), 85, 30 + 400 * i, 85);\r\n        }\r\n        if (i === nodeLength - 1) { // if the last node, print \"tail\" text\r\n          ctx.fillStyle = \"red\";\r\n          ctx.fillText(\"tail\", 142 + 400 * i, 160);\r\n        }\r\n      }\r\n      else if (i >= 4 && i < 8) {\r\n        ctx.strokeRect(1230 - 400 * (i % 4), 250, 250, 120);\r\n        printData(ctx, nodeData.data, 1255 - 400 * (i % 4), 280, 20, 200);\r\n        if (i !== 4) {\r\n          drawForwardArrow(ctx, 1230 - 400 * (i % 5), 295, 1480 - 400 * ((i + 1) % 5), 295);\r\n          drawBackwardArrow(ctx, 1230 - 400 * (i % 5), 315, 1480 - 400 * ((i + 1) % 5), 315);\r\n        }\r\n        else {\r\n          drawForwardArrow(ctx, 1340, 140, 1340, 250);\r\n          drawBackwardArrow(ctx, 1360, 140, 1360, 250);\r\n        }\r\n        if (i === nodeLength - 1) { // if the last node, print \"tail\" text\r\n          ctx.fillStyle = \"red\";\r\n          ctx.fillText(\"tail\", 1345 - 400 * (i % 4), 390);\r\n        }\r\n      }\r\n      else if (i >= 8) {\r\n        ctx.strokeRect(30 + 400 * (i % 8), 480, 250, 120);\r\n        printData(ctx, nodeData.data, 55 + 400 * (i % 8), 510, 20, 200);\r\n        if (i !== 8) {\r\n          drawForwardArrow(ctx, 280 + 400 * ((i - 1) % 8), 525, 30 + 400 * (i % 8), 525);\r\n          drawBackwardArrow(ctx, 280 + 400 * ((i - 1) % 8), 545, 30 + 400 * (i % 8), 545);\r\n        }\r\n        else {\r\n          drawForwardArrow(ctx, 140, 370, 140, 480);\r\n          drawBackwardArrow(ctx, 160, 370, 160, 480);\r\n        }\r\n        if (i === nodeLength - 1) { // if the last node, print \"tail\" text\r\n          ctx.fillStyle = \"red\";\r\n          ctx.fillText(\"tail\", 142 + 400 * (i % 8), 620);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  const drawForwardArrow = (ctx, fromX, fromY, toX, toY) => {\r\n    ctx.beginPath();\r\n    let headlen = 9; // length of head in pixels\r\n    let dx = toX - fromX;\r\n    let dy = toY - fromY;\r\n    let angle = Math.atan2(dy, dx);\r\n    ctx.strokeStyle = \"#000\";\r\n    ctx.moveTo(fromX, fromY);\r\n    ctx.lineTo(toX, toY);\r\n    ctx.lineTo(toX - headlen * Math.cos(angle - Math.PI / 6), toY - headlen * Math.sin(angle - Math.PI / 6));\r\n    ctx.moveTo(toX, toY);\r\n    ctx.lineTo(toX - headlen * Math.cos(angle + Math.PI / 6), toY - headlen * Math.sin(angle + Math.PI / 6));\r\n    ctx.stroke();\r\n  }\r\n\r\n  const drawBackwardArrow = (ctx, fromX, fromY, toX, toY) => {\r\n    ctx.beginPath();\r\n    let headlen = 9; // length of head in pixels\r\n    let dx = fromX - toX;\r\n    let dy = fromY - toY;\r\n    let angle = Math.atan2(dy, dx);\r\n    ctx.moveTo(toX, toY);\r\n    ctx.lineTo(fromX, fromY);\r\n    ctx.lineTo(fromX - headlen * Math.cos(angle - Math.PI / 6), fromY - headlen * Math.sin(angle - Math.PI / 6));\r\n    ctx.moveTo(fromX, fromY);\r\n    ctx.lineTo(fromX - headlen * Math.cos(angle + Math.PI / 6), fromY - headlen * Math.sin(angle + Math.PI / 6));\r\n    ctx.stroke();\r\n  }\r\n\r\n  function printData(context, text, x, y, lineHeight, fitWidth = 0, lineNum = 0) {\r\n    // if text's width is 0, no need to wrap data\r\n    if (fitWidth <= 0) {\r\n      context.fillText(text, x, y);\r\n      return;\r\n    }\r\n\r\n    // divide data until the substring's width is longer than the specified width\r\n    for (let i = 1; i <= text.length; i++) {\r\n      let str = text.substr(0, i);\r\n      if (context.measureText(str).width > fitWidth) {\r\n        if (lineNum < 5) { // truncate data from line number 6\r\n          context.fillText(text.substr(0, i - 1), x, y);\r\n        }\r\n        else {\r\n          context.fillText('', x, y);\r\n        }\r\n        printData(context, text.substr(i - 1), x, y + lineHeight, lineHeight, fitWidth, lineNum + 1);\r\n        return;\r\n      }\r\n    }\r\n    if (lineNum < 5) { // truncate data from line number 6\r\n      context.fillText(text, x, y);\r\n    }\r\n    else {\r\n      context.fillText('', x, y);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}>\r\n    </canvas>\r\n  );\r\n}\r\n\r\nexport default DllCanvas;\r\n","import { v4 as uuidv4 } from 'uuid';\r\n\r\nclass Node {\r\n  constructor(_data = null, _prev = null, _next = null) {\r\n    this.prev = _prev;\r\n    this.next = _next;\r\n    this.data = _data;\r\n    this.id = uuidv4();\r\n  }\r\n}\r\n\r\nclass DLinkedList {\r\n  constructor() {\r\n    this.head = null\r\n    this.tail = null;\r\n    this.length = 0;\r\n  }\r\n\r\n  // add data to the last place of the list\r\n  append(data) {\r\n    const newNode = new Node(data);\r\n    if (this.length === 0) {\r\n      this.head = this.tail = newNode;\r\n    }\r\n    else {\r\n      newNode.prev = this.tail;\r\n      this.tail.next = newNode;\r\n      this.tail = newNode;\r\n    }\r\n    this.length++;\r\n  }\r\n\r\n  // remove data at the last place of the list\r\n  pop() {\r\n    if (this.length === 0) {\r\n      console.log(\"The list is empty. Cannot pop().\");\r\n      return;\r\n    }\r\n    else if (this.length === 1) {\r\n      this.head = this.tail = null;\r\n    }\r\n    else {\r\n      this.tail.prev.next = null;\r\n      this.tail = this.tail.prev;\r\n    }\r\n    this.length--;\r\n  }\r\n\r\n  // add data to the first place of the list\r\n  unshift(data) {\r\n    const newNode = new Node(data);\r\n    if (this.length === 0) {\r\n      this.head = this.tail = newNode;\r\n    }\r\n    else {\r\n      newNode.next = this.head;\r\n      this.head.prev = newNode;\r\n      this.head = newNode;\r\n    }\r\n    this.length++;\r\n  }\r\n\r\n  // remove data at the first place of the list\r\n  shift() {\r\n    if (this.length === 0) {\r\n      console.log(\"The list is empty. Cannot shift().\");\r\n      return;\r\n    }\r\n    else if (this.length === 1) {\r\n      this.head = this.tail = null;\r\n    }\r\n    else {\r\n      this.head.next.prev = null;\r\n      this.head = this.head.next;\r\n    }\r\n    this.length--;\r\n  }\r\n\r\n  // insert data into the specified index\r\n  insertAt(insertIndex, data) {\r\n    if (insertIndex < 0 || insertIndex > this.length) {\r\n      console.log(\"Insert index out of bounds.\");\r\n      return -1;\r\n    }\r\n    else if (insertIndex === 0) {\r\n      return this.unshift(data);\r\n    }\r\n    else if (insertIndex === this.length) {\r\n      return this.append(data);\r\n    }\r\n    else {\r\n      const newNode = new Node(data);\r\n      let oneBeforeInsertNode = this.head;\r\n      for (let i = 0; i < insertIndex - 1; i++) {\r\n        oneBeforeInsertNode = oneBeforeInsertNode.next;\r\n      }\r\n      newNode.prev = oneBeforeInsertNode;\r\n      newNode.next = oneBeforeInsertNode.next;\r\n      oneBeforeInsertNode.next.prev = newNode;\r\n      oneBeforeInsertNode.next = newNode;\r\n      this.length++;\r\n    }\r\n  }\r\n\r\n  // remove data from the specified index\r\n  removeAt(removeIndex) {\r\n    if (removeIndex < 0 || removeIndex >= this.length) {\r\n      console.log(\"Remove index out of bounds.\");\r\n      return -1;\r\n    }\r\n    else if (this.length === 0) {\r\n      console.log(\"The list is empty. Cannot removeAt().\");\r\n      return;\r\n    }\r\n    else if (removeIndex === 0) {\r\n      return this.shift();\r\n    }\r\n    else if (removeIndex === this.length - 1) {\r\n      return this.pop();\r\n    }\r\n    else {\r\n      let oneBeforeRemoveNode = this.head;\r\n      for (let i = 0; i < removeIndex - 1; i++) {\r\n        oneBeforeRemoveNode = oneBeforeRemoveNode.next;\r\n      }\r\n      oneBeforeRemoveNode.next = oneBeforeRemoveNode.next.next;\r\n      oneBeforeRemoveNode.next.next.prev = oneBeforeRemoveNode;\r\n      this.length--;\r\n    }\r\n  }\r\n\r\n  // return node's index if found\r\n  search(value) {\r\n    let currentNode = this.head;\r\n    let index = 0;\r\n\r\n    while (currentNode) {\r\n      if (currentNode.data === value) {\r\n        return index;\r\n      }\r\n      currentNode = currentNode.next;\r\n      index++;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  clear() {\r\n    this.head = this.tail = null;\r\n    this.length = 0;\r\n  }\r\n\r\n  print() {\r\n    let currentNode = this.head;\r\n    while (currentNode) {\r\n      console.log(currentNode.data);\r\n      currentNode = currentNode.next;\r\n    }\r\n  }\r\n\r\n  getLength() {\r\n    return this.length;\r\n  }\r\n\r\n  // return all node data in the form of an array for rendering\r\n  getAllNodesForRender() {\r\n    const nodes = [];\r\n    let currentNode = this.head;\r\n    while (currentNode) {\r\n      nodes.push({\r\n        id: currentNode.id,\r\n        data: currentNode.data\r\n      });\r\n      currentNode = currentNode.next;\r\n    }\r\n\r\n    return nodes;\r\n  }\r\n}\r\n\r\nexport const DLL = new DLinkedList();\r\n\r\n// const myDoublyLinkedList = new DLinkedList(1);\r\n// myDoublyLinkedList.shift();\r\n// myDoublyLinkedList.append(2);\r\n// myDoublyLinkedList.append(3);\r\n// myDoublyLinkedList.unshift(100);\r\n// myDoublyLinkedList.append(4);\r\n// myDoublyLinkedList.insertAt(4, 'a');\r\n\r\n// myDoublyLinkedList.removeAt(2);\r\n\r\n// myDoublyLinkedList.clear();\r\n\r\n// myDoublyLinkedList.print();","import React, { useState, useEffect } from 'react';\r\n\r\nimport ReturnToHome from '../ReturnToHome';\r\nimport DllCanvas from './DllCanvas';\r\nimport { DLL } from './DLL_class';\r\nimport './doublyLinkedList.css';\r\n\r\nconst DoublyLinkedList = () => {\r\n  const [nodeData, setNodeData] = useState([]);\r\n  const [nodeLength, setNodeLength] = useState(0);\r\n  const [isMaxLength, setIsMaxLength] = useState(false);\r\n  const [inputData, setInputData] = useState('');\r\n  const [inputIndex, setInputIndex] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (nodeLength >= 12) {\r\n      setIsMaxLength(true);\r\n    }\r\n    else {\r\n      setIsMaxLength(false);\r\n    }\r\n  }, [nodeLength]);\r\n\r\n  const handleChangeInputData = (e) => {\r\n    setInputData(e.target.value);\r\n  }\r\n\r\n  const handleChangeInputIndex = (e) => {\r\n    setInputIndex(e.target.value);\r\n  }\r\n\r\n  const handleSetNodeData = () => {\r\n    setNodeData(DLL.getAllNodesForRender());\r\n    setNodeLength(DLL.getLength());\r\n    setInputData('');\r\n    setInputIndex('');\r\n  }\r\n\r\n  const handleAppendDLL = () => {\r\n    if (inputData.trim() === '') {\r\n      return alert('Please input valid data.');\r\n    }\r\n    DLL.append(inputData);\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handlePopDLL = () => {\r\n    if (nodeData.length === 0) {\r\n      return alert(\"The list is empty.\");\r\n    }\r\n    DLL.pop();\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handleUnshiftDLL = () => {\r\n    if (inputData.trim() === '') {\r\n      return alert('Please input valid data');\r\n    }\r\n    DLL.unshift(inputData);\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handleShiftDLL = () => {\r\n    if (nodeData.length === 0) {\r\n      return alert(\"The list is empty.\");\r\n    }\r\n    DLL.shift();\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handleInsertAtDLL = () => {\r\n    if (inputIndex.trim() === '' || isNaN(parseInt(inputIndex))) {\r\n      return alert('Please input valid index');\r\n    }\r\n    if (inputData.trim() === '') {\r\n      return alert('Please input valid data');\r\n    }\r\n\r\n    const insertAtResult = DLL.insertAt(parseInt(inputIndex), inputData);\r\n    if (insertAtResult === -1) {\r\n      return alert('Index out of bounds.');\r\n    }\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handleRemoveAtDLL = () => {\r\n    if (inputIndex.trim() === '' || isNaN(parseInt(inputIndex))) {\r\n      return alert('Please input valid index');\r\n    }\r\n    const removeAtResult = DLL.removeAt(parseInt(inputIndex));\r\n    if (removeAtResult === -1) {\r\n      return alert('Index out of bounds.');\r\n    }\r\n    handleSetNodeData();\r\n  }\r\n\r\n  const handleClearDLL = () => {\r\n    if (nodeData.length === 0) {\r\n      return alert(\"The list is empty.\");\r\n    }\r\n    if (window.confirm('Would you clear the list?')) {\r\n      DLL.clear();\r\n      handleSetNodeData();\r\n    }\r\n  }\r\n\r\n  const maxLengthColor = () => {\r\n    if (isMaxLength) {\r\n      return { color: 'red' };\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ReturnToHome />\r\n      <div className=\"doubly-linked-list\">\r\n        <h1 className=\"ddl-header\">Doubly Linked List</h1>\r\n        <div className=\"dll-actions\">\r\n          <div className=\"dll-length\">\r\n            Length: <span style={maxLengthColor()}>{nodeLength}</span> / 12\r\n          </div>\r\n          <div className=\"dll-input\">\r\n            <label className=\"dll-input-label\">\r\n              Index:\r\n            <input\r\n                className=\"dll-input-field\"\r\n                type=\"text\"\r\n                value={inputIndex}\r\n                onChange={handleChangeInputIndex}\r\n              />\r\n            </label>\r\n            <label className=\"dll-input-label\">\r\n              Data:\r\n            <input\r\n                className=\"dll-input-field\"\r\n                type=\"text\"\r\n                value={inputData}\r\n                onChange={handleChangeInputData}\r\n              />\r\n            </label>\r\n          </div>\r\n          <div className=\"dll-buttons\">\r\n            <button\r\n              className=\"btn btn-dll-append\"\r\n              type=\"button\"\r\n              onClick={handleAppendDLL}\r\n              disabled={isMaxLength}\r\n            >APPEND</button>\r\n            <button\r\n              className=\"btn btn-dll-pop\"\r\n              type=\"button\"\r\n              onClick={handlePopDLL}\r\n            >POP</button>\r\n            <button\r\n              className=\"btn btn-dll-unshift\"\r\n              type=\"button\"\r\n              onClick={handleUnshiftDLL}\r\n              disabled={isMaxLength}\r\n            >UNSHIFT</button>\r\n            <button\r\n              className=\"btn btn-dll-shift\"\r\n              type=\"button\"\r\n              onClick={handleShiftDLL}\r\n            >SHIFT</button>\r\n            <button\r\n              className=\"btn btn-dll-insertAt\"\r\n              type=\"button\"\r\n              onClick={handleInsertAtDLL}\r\n              disabled={isMaxLength}\r\n            >INSERT AT</button>\r\n            <button\r\n              className=\"btn btn-dll-removeAt\"\r\n              type=\"button\"\r\n              onClick={handleRemoveAtDLL}\r\n            >REMOVE AT</button>\r\n            <button\r\n              className=\"btn btn-dll-clear\"\r\n              type=\"button\"\r\n              onClick={handleClearDLL}\r\n            >CLEAR</button>\r\n          </div>\r\n        </div>\r\n        <div className=\"node-items\">\r\n          <DllCanvas\r\n            nodes={nodeData}\r\n          />\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n\r\n  );\r\n}\r\n\r\n\r\nexport default DoublyLinkedList;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Main from './components/Main';\nimport SinglyLinkedList from './components/singlyLinkedList/SinglyLinkedList';\nimport DoublyLinkedList from './components/doublyLinkedList/DoublyLinkedList';\nimport './app.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/dsvisualizer\" component={Main} exact={true} />\n        <Route path=\"/sll\" component={SinglyLinkedList} exact={true} />\n        <Route path=\"/dll\" component={DoublyLinkedList} exact={true} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}